{"version":3,"sources":["Hive/Buttons/Buttons.module.css","Hive/Header/CalendarButton/DatePicker/DatePicker.module.css","Hive/Grid/Grid.module.css","Modal/Modal.module.css","Hive/Hive.module.css","Hive/Header/HeaderButton.module.css","Hive/Found/Found.module.css","Hive/Progress/Progress.module.css","Loading/Loading.module.css","Hive/Messages/Messages.module.css","Hive/Found/WordsInfo/WordsInfo.module.css","Hive/Header/InfoButton/InfoButton.module.css","Hive/Header/CalendarButton/CalendarButton.module.css","Hive/Header/Header.module.css","api.ts","hashcode.ts","twoDigits.ts","hooks.ts","useNoBodyScroll.ts","Loading/Loading.tsx","LettersProvider/LettersProvider.tsx","LettersProvider/useLetters.ts","WordProvider/WordsProvider.tsx","WordProvider/useWords.ts","isPangram.ts","Hive/hooks.ts","Modal/Modal.tsx","Hive/Found/WordsInfo/WordsInfo.tsx","Hive/Found/Found.tsx","shuffle.ts","Hive/Buttons/useShuffledLetters.ts","Hive/Buttons/Buttons.tsx","Hive/Progress/Progress.tsx","Hive/Header/InfoButton/InfoButton.tsx","Hive/Header/CalendarButton/DatePicker/DatePicker.tsx","Hive/Header/CalendarButton/CalendarButton.tsx","Hive/Header/Header.tsx","Hive/Messages/ErrorMessage.tsx","Hive/Messages/Messages.tsx","Hive/Grid/Grid.tsx","Hive/useFoundWords.ts","Hive/Hive.tsx","pages/Play/Play.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","gzipJsonFetch","url","fetch","headers","then","resp","arrayBuffer","buf","Uint8Array","pako","inflate","TextDecoder","decode","str","JSON","parse","hashCode","input","hash","i","length","charCodeAt","twoDigits","v","TODAY","now","Date","getFullYear","getMonth","getDate","map","join","isProbablyDate","ymd","rest","Number","year","month","day","useGameId","gameIdParam","useParams","gameId","match","gameHash","hashcode","isDate","useNoBodyScroll","useEffect","document","body","classList","add","remove","Loading","className","classes","container","ldsRipple","Context","createContext","centerLetter","outerLetters","all","LettersProvider","children","useState","option","setOption","error","setError","process","options","catch","e","console","letters","split","filter","letter","Provider","value","useLetters","useContext","words","GameCreator","setWords","key","substring","obj","loadedWords","word","includes","message","useWords","isPangram","Set","size","useScore","score","useMemo","bonus","reduce","total","wordScore","useGame","Modal","title","onClose","modalBackground","modal","header","onClick","contents","footer","WordsInfo","showing","setShowing","href","target","rel","button","Found","found","cleaned","Object","keys","acc","wordList","encodeURIComponent","shuffle","original","a","sort","Math","random","b","useShuffledLetters","shuffled","setShuffled","shuffleLetters","useCallback","reshuffle","Buttons","onGuess","guess","setGuess","guessRef","useRef","current","makeGuess","onLetterClick","event","currentTarget","getAttribute","g","onBackspace","substr","onKeyPress","preventDefault","toLocaleLowerCase","addEventListener","removeEventListener","LetterButton","data-letter","letterButton","Boolean","CenterLetterButton","props","letterButtons","topRow","middleRow","bottomRow","controls","Progress","currentPoints","totalPoints","bars","id","max","htmlFor","help","InfoButton","headerClasses","MONTHS","today","DatePicker","onChange","currentGameDate","setYear","setMonth","changeYear","delta","y","changeMonth","m","added","monthGrid","dayOfWeek","getDay","cells","push","filler","daysInMonth","isToday","isCurrent","classNames","dateButton","todayButton","currentButton","center","CalendarButton","history","useHistory","onNewDatePicked","Header","to","ErrorMessage","msg","reason","Messages","displayedMessage","setDisplayedMessage","timerIdRef","showMessage","clearTimeout","setTimeout","undefined","onBadGuess","badGuess","detail","onPangram","window","pangram","EMPTY","Grid","min","shortest","longest","columns","totals","count","matchingWords","border","matchingLength","grid","useFoundWords","setStateFound","addFoundWord","newWord","existing","newWords","localStorage","setItem","stringify","item","getItem","saved","Array","isArray","ex","getSavedWords","Hive","dispatchEvent","CustomEvent","gameContainer","buttonsContainer","column","Play","WordsProvider","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.daf66d87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Buttons_container__1Zt8k\",\"guess\":\"Buttons_guess__2Anft\",\"letterButton\":\"Buttons_letterButton__1mMw1\",\"centerLetter\":\"Buttons_centerLetter__35133\",\"letterButtons\":\"Buttons_letterButtons__3XtpL\",\"controls\":\"Buttons_controls__vjaFF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DatePicker_header__3oWo4\",\"center\":\"DatePicker_center__3IS8k\",\"monthGrid\":\"DatePicker_monthGrid__15JAF\",\"dateButton\":\"DatePicker_dateButton__3t50Y\",\"todayButton\":\"DatePicker_todayButton__USWS_\",\"currentButton\":\"DatePicker_currentButton__3kv-Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__1BRwy\",\"border\":\"Grid_border__20nNQ\",\"letter\":\"Grid_letter__FpcEt\",\"filler\":\"Grid_filler__1NEAc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Modal_header__2ZLRN\",\"footer\":\"Modal_footer__3LLGM\",\"contents\":\"Modal_contents__2N7hF\",\"modalBackground\":\"Modal_modalBackground__gT2gd\",\"modal\":\"Modal_modal__lEGX8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Hive_container__1Zjua\",\"gameContainer\":\"Hive_gameContainer__23RNb\",\"buttonsContainer\":\"Hive_buttonsContainer__3BlGP\",\"column\":\"Hive_column__uIVAh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"HeaderButton_button__2v-ld\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Found_container__1IG7c\",\"wordList\":\"Found_wordList__kw6ut\",\"word\":\"Found_word__XXr99\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Progress_container__2gTl_\",\"bars\":\"Progress_bars__3T60p\",\"help\":\"Progress_help__17CCm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Loading_container__3Q6Jl\",\"ldsRipple\":\"Loading_ldsRipple__3LZlq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Messages_container__r77DS\",\"pangram\":\"Messages_pangram__2KAkr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"WordsInfo_button__18cOS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"InfoButton_button__3liaB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CalendarButton_button__317hN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Yh4QF\"};","import pako from 'pako';\n\nexport const jsonFetch = (url: string) =>\n  fetch(url, { headers: { 'Content-Type': 'application/json' } }).then((resp) =>\n    resp.json()\n  );\n\nexport const gzipJsonFetch = (url: string) =>\n  fetch(url, {\n    headers: { 'Content-Type': 'application/json', 'Content-Encoding': 'gzip' },\n  })\n    .then((resp) => resp.arrayBuffer())\n    .then((buf) => new Uint8Array(buf))\n    .then((buf) => pako.inflate(buf))\n    .then((buf) => new TextDecoder('utf-8').decode(buf))\n    .then((str) => JSON.parse(str));\n","const hashCode = (input: string) => {\n  let hash = 0;\n  for (let i = 0; i < input.length; i += 1) {\n    const char = input.charCodeAt(i);\n    hash = 31 * hash + char;\n  }\n  return hash;\n};\n\nexport default hashCode;\n","const twoDigits = (v: number) => {\n  if (v < 10) {\n    return `0${v}`;\n  }\n  return v;\n};\n\nexport default twoDigits;\n","import { useParams } from 'react-router-dom';\nimport hashcode from './hashcode';\nimport twoDigits from './twoDigits';\n\nconst TODAY = (() => {\n  const now = new Date();\n  return [now.getFullYear(), now.getMonth() + 1, now.getDate()]\n    .map(twoDigits)\n    .join('-');\n})();\n\nconst isProbablyDate = (ymd: unknown[] | null) => {\n  if (!ymd) {\n    return false;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_, ...rest] = ymd;\n  if (rest.length !== 3) {\n    return false;\n  }\n\n  const [year, month, day] = rest.map(Number);\n  // Yeah, it's a best-effort thing.\n  return year && month >= 1 && month <= 12 && day >= 1 && day <= 31;\n};\n\nexport const useGameId = () => {\n  const { gameId: gameIdParam } = useParams<{ gameId?: string }>();\n  const gameId = gameIdParam ?? TODAY;\n\n  const match = gameId.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/);\n\n  return { gameId, gameHash: hashcode(gameId), isDate: isProbablyDate(match) };\n};\n","import { useEffect } from 'react';\n\nexport const useNoBodyScroll = () => {\n  useEffect(() => {\n    document.body.classList.add('no-scroll');\n    return () => {\n      document.body.classList.remove('no-scroll');\n    };\n  }, []);\n};\n","import { useNoBodyScroll } from '../useNoBodyScroll';\nimport classes from './Loading.module.css';\n\nconst Loading = () => {\n  useNoBodyScroll();\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.ldsRipple}>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import { createContext, useEffect, useState } from 'react';\nimport { gzipJsonFetch } from '../api';\nimport { useGameId } from '../hooks';\nimport Loading from '../Loading';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype ContextType = {\n  centerLetter: string;\n  outerLetters: [string, string, string, string, string, string];\n  all: string;\n};\n\nexport const Context = createContext<ContextType>({\n  centerLetter: '',\n  outerLetters: ['', '', '', '', '', ''],\n  all: '',\n});\n\nconst LettersProvider = ({ children }: Props) => {\n  const { gameHash } = useGameId();\n  const [option, setOption] = useState('');\n  const [error, setError] = useState<Error | undefined>();\n\n  useEffect(() => {\n    gzipJsonFetch(`${process.env.PUBLIC_URL}/words/options.json.gz`)\n      .then((options) => options[gameHash % options.length])\n      .then(setOption)\n      .catch((e) => {\n        console.error(e);\n        setError(e);\n      });\n  }, [gameHash]);\n\n  if (error) {\n    return <div>Error!</div>;\n  }\n\n  if (!option) {\n    return <Loading />;\n  }\n\n  const letters = option.split('');\n  const centerLetter = letters[gameHash % letters.length];\n  const outerLetters = letters.filter(\n    (letter) => letter !== centerLetter\n  ) as ContextType['outerLetters'];\n\n  return (\n    <Context.Provider value={{ centerLetter, outerLetters, all: option }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default LettersProvider;\n","import { useContext } from 'react';\nimport { Context } from './LettersProvider';\n\nexport const useLetters = () => {\n  return useContext(Context);\n};\n","import { createContext, useEffect, useState } from 'react';\nimport { gzipJsonFetch } from '../api';\nimport { useLetters } from '../LettersProvider';\nimport Loading from '../Loading';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype ContextType = {\n  words: string[];\n};\n\nexport const Context = createContext<ContextType>({\n  words: [],\n});\n\nconst GameCreator = ({ children }: Props) => {\n  const { all, centerLetter } = useLetters();\n\n  const [words, setWords] = useState<string[]>([]);\n  const [error, setError] = useState<Error | undefined>();\n\n  useEffect(() => {\n    const key = all.substring(0, 3);\n    const url = `${process.env.PUBLIC_URL}/words/${key}.json.gz`;\n    gzipJsonFetch(url)\n      .then((obj) => obj[all])\n      .then((loadedWords) =>\n        loadedWords.filter((word: string) => word.includes(centerLetter))\n      )\n      .then(setWords)\n      .catch(setError);\n  }, [all, centerLetter]);\n\n  if (error) {\n    return <pre>{error.message}</pre>;\n  }\n\n  if (words.length === 0) {\n    return <Loading />;\n  }\n\n  return <Context.Provider value={{ words }}>{children}</Context.Provider>;\n};\n\nexport default GameCreator;\n","import { useContext } from 'react';\nimport { Context } from './WordsProvider';\n\nexport const useWords = () => {\n  return useContext(Context);\n};\n","const isPangram = (str: string) => {\n  return new Set(str.split('')).size === 7;\n};\n\nexport default isPangram;\n","import { useContext, useMemo } from 'react';\nimport isPangram from '../isPangram';\nimport { Context } from './Hive';\n\nexport const useScore = (words: string[]) => {\n  const score = useMemo(() => {\n    return words\n      .map((word) => {\n        if (word.length === 4) {\n          return 1;\n        }\n\n        if (word.length < 7) {\n          return word.length;\n        }\n\n        const bonus = isPangram(word) ? 7 : 0;\n        return word.length + bonus;\n      })\n      .reduce((total, wordScore) => total + wordScore, 0);\n  }, [words]);\n\n  return { score };\n};\n\nexport const useGame = () => {\n  return useContext(Context);\n};\n","import classes from './Modal.module.css';\nimport { MdClose as Close } from 'react-icons/md';\nimport { useNoBodyScroll } from '../useNoBodyScroll';\n\ntype Props = {\n  title: string;\n  children: React.ReactNode;\n  onClose: () => void;\n};\n\nconst Modal = ({ children, title, onClose }: Props) => {\n  useNoBodyScroll();\n\n  return (\n    <div className={classes.modalBackground}>\n      <div className={classes.modal}>\n        <div className={classes.header}>\n          <h2>{title}</h2>\n          <button onClick={onClose}>\n            <Close />\n          </button>\n        </div>\n        <div className={classes.contents}>{children}</div>\n        <div className={classes.footer}>\n          <button onClick={onClose}>Lukk</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import classes from './WordsInfo.module.css';\nimport { useMemo, useState } from 'react';\nimport { MdHelpOutline as HelpIcon } from 'react-icons/md';\nimport Modal from 'Modal';\n\nconst WordsInfo = () => {\n  const [showing, setShowing] = useState(false);\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return false;\n    }\n    return (\n      <Modal title=\"«Hva er disse ordene?»\" onClose={() => setShowing(false)}>\n        <p>\n          Ordene som brukes her kommer fra den{' '}\n          <a\n            href=\"https://www.nb.no/sprakbanken/ressurskatalog/oai-nb-no-sbr-5/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Norsk ordbank\n          </a>\n          . Alle ordene stemmer, men noen ord blir sjelden (eller aldri) sett i\n          det virkelige liv.\n        </p>\n        <p>\n          <a\n            href=\"mailto:evancharlton+humle@gmail.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Skriv en e-post\n          </a>{' '}\n          hvis du finner et galt ord 😀\n        </p>\n      </Modal>\n    );\n  }, [showing]);\n\n  return (\n    <>\n      <button onClick={() => setShowing(true)} className={classes.button}>\n        <HelpIcon />\n      </button>\n      {modal}\n    </>\n  );\n};\n\nexport default WordsInfo;\n","import { useMemo } from 'react';\nimport { useGame } from '../hooks';\nimport classes from './Found.module.css';\nimport WordsInfo from './WordsInfo';\n\nconst Found = () => {\n  const { found: words } = useGame();\n  const cleaned = useMemo(() => {\n    const foo = Object.keys(\n      words.reduce((acc, word) => ({ ...acc, [word]: true }), {})\n    );\n    return foo;\n  }, [words]);\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.wordList}>\n        {cleaned.map((word) => (\n          <a\n            className={classes.word}\n            key={word}\n            href={`https://naob.no/s%C3%B8k/${encodeURIComponent(word)}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {word}\n          </a>\n        ))}\n      </div>\n      <WordsInfo />\n    </div>\n  );\n};\n\nexport default Found;\n","const shuffle = (original: string[]) =>\n  original\n    .map((a) => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => a.value);\n\nexport default shuffle;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useLetters } from 'LettersProvider';\nimport shuffle from 'shuffle';\n\nconst useShuffledLetters = () => {\n  const { outerLetters } = useLetters();\n  const [shuffled, setShuffled] = useState<string[]>([]);\n\n  const shuffleLetters = useCallback(() => {\n    setShuffled(shuffle(outerLetters));\n  }, [outerLetters]);\n\n  useEffect(() => {\n    setShuffled(shuffle(outerLetters));\n  }, [outerLetters, setShuffled]);\n\n  return {\n    shuffled,\n    reshuffle: shuffleLetters,\n  };\n};\n\nexport default useShuffledLetters;\n","import {\n  MdKeyboardBackspace as Backspace,\n  MdRefresh as Shuffle,\n  MdKeyboardReturn as Enter,\n} from 'react-icons/md';\nimport classes from './Buttons.module.css';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useLetters } from 'LettersProvider';\nimport { useGame } from '../hooks';\nimport useShuffledLetters from './useShuffledLetters';\n\nconst Buttons = () => {\n  const { onGuess } = useGame();\n\n  const { all, centerLetter, outerLetters } = useLetters();\n  const [guess, setGuess] = useState('');\n  const { shuffled, reshuffle } = useShuffledLetters();\n\n  const guessRef = useRef('');\n  guessRef.current = guess;\n\n  useEffect(() => {\n    guessRef.current = '';\n    setGuess('');\n  }, [outerLetters, centerLetter]);\n\n  const makeGuess = useCallback(() => {\n    onGuess(guessRef.current);\n    setGuess('');\n  }, [onGuess, guessRef]);\n\n  const onLetterClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      const button = event.currentTarget;\n      const letter = button.getAttribute('data-letter');\n      setGuess((g) => `${g}${letter}`);\n    },\n    [setGuess]\n  );\n\n  const onBackspace = useCallback(() => {\n    setGuess((g) => g.substr(0, g.length - 1));\n  }, [setGuess]);\n\n  const onKeyPress = useCallback(\n    (e: KeyboardEvent) => {\n      const { key } = e;\n\n      if (key === 'Backspace') {\n        setGuess((g) => g.substring(0, g.length - 1));\n        return;\n      }\n\n      if (key === ' ') {\n        reshuffle();\n        e.preventDefault();\n        return;\n      }\n\n      if (key === 'Enter') {\n        makeGuess();\n      }\n\n      if (!all.includes(key.toLocaleLowerCase())) {\n        return;\n      }\n\n      setGuess((g) => `${g}${key}`);\n    },\n    [all, makeGuess, reshuffle]\n  );\n\n  useEffect(() => {\n    document.addEventListener('keydown', onKeyPress);\n    return () => {\n      document.removeEventListener('keydown', onKeyPress);\n    };\n  }, [onKeyPress]);\n\n  type LetterButtonProps = { letter: string } & JSX.IntrinsicElements['button'];\n\n  const LetterButton = ({ letter, className, ...rest }: LetterButtonProps) => {\n    return (\n      <button\n        data-letter={letter}\n        onClick={onLetterClick}\n        className={[classes.letterButton, className].filter(Boolean).join(' ')}\n        {...rest}\n      >\n        {letter}\n      </button>\n    );\n  };\n\n  const CenterLetterButton = (props: LetterButtonProps) => (\n    <LetterButton {...props} className={classes.centerLetter} />\n  );\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.guess}>{guess || <>&nbsp;</>}</div>\n      <div className={classes.letterButtons}>\n        <div className={classes.topRow}>\n          <LetterButton letter={shuffled[0]} />\n          <LetterButton letter={shuffled[1]} />\n        </div>\n        <div className={classes.middleRow}>\n          <LetterButton letter={shuffled[2]} />\n          <CenterLetterButton letter={centerLetter} />\n          <LetterButton letter={shuffled[3]} />\n        </div>\n        <div className={classes.bottomRow}>\n          <LetterButton letter={shuffled[4]} />\n          <LetterButton letter={shuffled[5]} />\n        </div>\n      </div>\n      <div className={classes.controls}>\n        <button onClick={onBackspace}>\n          <Backspace />\n        </button>\n        <button onClick={reshuffle}>\n          <Shuffle />\n        </button>\n        <button onClick={makeGuess}>\n          <Enter />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Buttons;\n","import { useWords } from 'WordProvider';\nimport { useGame, useScore } from '../hooks';\nimport classes from './Progress.module.css';\nimport { MdHelpOutline as Help } from 'react-icons/md';\nimport { useMemo, useState } from 'react';\nimport Modal from 'Modal';\n\nconst Progress = () => {\n  const { found } = useGame();\n  const { words } = useWords();\n\n  const { score: currentPoints } = useScore(found);\n  const { score: totalPoints } = useScore(words);\n\n  const [showing, setShowing] = useState(false);\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return null;\n    }\n\n    return (\n      <Modal title=\"Poeng\" onClose={() => setShowing(false)}>\n        <p>\n          Poengene beregnes ut fra hvor mange ord som blir funnet. Hvert ord har\n          ulike poengsummer.\n        </p>\n        <ul>\n          <li>\n            ord på fire bokstaver er verdt <strong>ett poeng</strong>\n          </li>\n          <li>\n            hver bokstave etter fire er verdt <strong>ett ekstra poeng</strong>\n          </li>\n          <li>\n            ord som bruker alle bokstavenve minst en gang (et pangram) gir{' '}\n            <strong>syv ekstra poeng</strong>\n          </li>\n        </ul>\n        <h3>Eksempel</h3>\n        <p>\n          H&nbsp;I&nbsp;K&nbsp;L&nbsp;O&nbsp;S&nbsp;<strong>T</strong>\n        </p>\n        <ul>\n          <li>\n            <strong>hist</strong> er 4 poeng\n          </li>\n          <li>\n            <strong>hittil</strong> er 6 poeng\n          </li>\n          <li>\n            <strong>holistisk</strong> er (9 + 7) = 16 poeng\n          </li>\n        </ul>\n      </Modal>\n    );\n  }, [showing]);\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.bars}>\n        <progress id=\"word-progress\" max={words.length} value={found.length} />\n        <label htmlFor=\"word-progress\">\n          Ord: {found.length} / {words.length}\n        </label>\n        <progress\n          id=\"points-progress\"\n          max={totalPoints}\n          value={currentPoints}\n        />\n        <label htmlFor=\"points-progress\">\n          Poeng: {currentPoints} / {totalPoints}\n        </label>\n      </div>\n      <button onClick={() => setShowing(true)} className={classes.help}>\n        <Help />\n      </button>\n      {modal}\n    </div>\n  );\n};\n\nexport default Progress;\n","import { useMemo, useState } from 'react';\nimport { MdInfoOutline as InfoIcon } from 'react-icons/md';\nimport headerClasses from '../HeaderButton.module.css';\nimport classes from './InfoButton.module.css';\nimport Modal from 'Modal';\n\nconst InfoButton = () => {\n  const [showing, setShowing] = useState(false);\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return null;\n    }\n    return (\n      <Modal title=\"Staver Humle!\" onClose={() => setShowing(false)}>\n        <p>\n          Staver Humle er et ordspill hvor du lage så mange ord som du kan.\n          Hvert puslespill har syv ulike bokstaver&mdash;en fast i midten og\n          seks rundt.\n        </p>\n        <h3>Reglene</h3>\n        <p>Hvert ord:</p>\n        <ul>\n          <li>\n            <strong>må bruke</strong> den midterste bokstaven\n          </li>\n          <li>\n            være minst <strong>fire bokstaver</strong> lange\n          </li>\n          <li>\n            bruker <strong>bare</strong> de syv bokstavene\n            <br />\n            (men bokstaver kan gjentas)\n          </li>\n        </ul>\n        <p>\n          Hver puslespill har <strong>minst ett</strong> ord som bruker{' '}\n          <strong>alle bokstavene</strong>.\n        </p>\n        <p>\n          Det er en ny puslespill <strong>hver dag!</strong>\n        </p>\n        <p>Lykke til!</p>\n        <p>\n          <em>\n            (Want to play in English? Try the{' '}\n            <a\n              href=\"https://www.nytimes.com/puzzles/spelling-bee\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              NYT Spelling Bee\n            </a>\n            !)\n          </em>\n        </p>\n      </Modal>\n    );\n  }, [showing]);\n\n  return (\n    <>\n      <button\n        onClick={() => setShowing(true)}\n        className={[headerClasses.button, classes.button]\n          .filter(Boolean)\n          .join(' ')}\n      >\n        <InfoIcon />\n      </button>\n      {modal}\n    </>\n  );\n};\n\nexport default InfoButton;\n","import { useMemo, useState } from 'react';\nimport classes from './DatePicker.module.css';\nimport {\n  BsChevronDoubleLeft as BackYear,\n  BsChevronDoubleRight as ForwardYear,\n  BsChevronLeft as BackMonth,\n  BsChevronRight as ForwardMonth,\n} from 'react-icons/bs';\nimport { useGameId } from 'hooks';\nimport twoDigits from 'twoDigits';\n\ntype Props = {\n  onChange: (gameId: string) => void;\n};\n\nconst MONTHS = [\n  'januar',\n  'februar',\n  'mars',\n  'april',\n  'mai',\n  'juni',\n  'juli',\n  'august',\n  'september',\n  'oktober',\n  'november',\n  'desember',\n];\n\nconst today = new Date();\n\nconst DatePicker = ({ onChange }: Props) => {\n  const { gameId, isDate } = useGameId();\n  const currentGameDate = useMemo(() => {\n    return isDate ? new Date(gameId) : null;\n  }, [isDate, gameId]);\n\n  const [year, setYear] = useState((currentGameDate || today).getFullYear());\n  const [month, setMonth] = useState((currentGameDate || today).getMonth());\n\n  const changeYear = (delta: 1 | -1) => () => {\n    setYear((y) => y + delta);\n  };\n\n  const changeMonth = (delta: 1 | -1) => () => {\n    setMonth((m) => {\n      const added = m + delta;\n      if (added < 0) {\n        setYear((y) => y - 1);\n        return 11;\n      }\n      if (added >= 12) {\n        setYear((y) => y + 1);\n        return 0;\n      }\n      return added;\n    });\n  };\n\n  const monthGrid = useMemo(() => {\n    const start = new Date(year, month, 1);\n    const dayOfWeek = start.getDay();\n\n    const cells = [];\n    for (let i = 0; i < dayOfWeek; i += 1) {\n      cells.push(\n        <div key={`filler-${i}`} className={classes.filler}>\n          &nbsp;\n        </div>\n      );\n    }\n\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    for (let i = 1; i <= daysInMonth; i += 1) {\n      const isToday =\n        year === today.getFullYear() &&\n        month === today.getMonth() &&\n        i === today.getDate();\n\n      const isCurrent =\n        currentGameDate &&\n        year === currentGameDate.getFullYear() &&\n        month === currentGameDate.getMonth() &&\n        i === currentGameDate.getDate();\n\n      const classNames = [classes.dateButton];\n      if (isToday) {\n        classNames.push(classes.todayButton);\n      }\n      if (isCurrent) {\n        classNames.push(classes.currentButton);\n      }\n\n      cells.push(\n        <button\n          key={`date-${i}`}\n          className={classNames.join(' ')}\n          onClick={() => {\n            onChange(`${year}-${twoDigits(month + 1)}-${twoDigits(i)}`);\n          }}\n        >\n          {i}\n        </button>\n      );\n    }\n\n    return <div className={classes.monthGrid}>{cells}</div>;\n  }, [year, month, onChange, currentGameDate]);\n\n  return (\n    <div>\n      <div className={classes.header}>\n        <button onClick={changeYear(-1)}>\n          <BackYear />\n        </button>\n        <button onClick={changeMonth(-1)}>\n          <BackMonth />\n        </button>\n        <button\n          className={classes.center}\n          onClick={() => {\n            const now = new Date();\n            setYear(now.getFullYear());\n            setMonth(now.getMonth());\n          }}\n        >\n          <span className={classes.year}>{year}</span>\n          &nbsp;/&nbsp;\n          <span className={classes.month}>{MONTHS[month]}</span>\n        </button>\n        <button onClick={changeMonth(1)}>\n          <ForwardMonth />\n        </button>\n        <button onClick={changeYear(1)}>\n          <ForwardYear />\n        </button>\n      </div>\n      {monthGrid}\n    </div>\n  );\n};\n\nexport default DatePicker;\n","import { useCallback, useMemo, useState } from 'react';\nimport { MdToday as CalendarIcon } from 'react-icons/md';\nimport { useHistory } from 'react-router-dom';\nimport Modal from 'Modal';\nimport headerClasses from '../HeaderButton.module.css';\nimport classes from './CalendarButton.module.css';\nimport DatePicker from './DatePicker';\n\nconst CalendarButton = () => {\n  const history = useHistory();\n  const [showing, setShowing] = useState(false);\n\n  const onClose = useCallback(() => {\n    setShowing(false);\n  }, [setShowing]);\n\n  const onNewDatePicked = useCallback(\n    (gameId: string) => {\n      onClose();\n      history.push(`/${gameId}`);\n    },\n    [onClose, history]\n  );\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return null;\n    }\n    return (\n      <Modal title=\"Dato\" onClose={() => setShowing(false)}>\n        <DatePicker onChange={onNewDatePicked} />\n      </Modal>\n    );\n  }, [showing, setShowing, onNewDatePicked]);\n\n  return (\n    <>\n      <button\n        onClick={() => setShowing(true)}\n        className={[headerClasses.button, classes.button]\n          .filter(Boolean)\n          .join(' ')}\n      >\n        <CalendarIcon />\n      </button>\n      {modal}\n    </>\n  );\n};\n\nexport default CalendarButton;\n","import { Link } from 'react-router-dom';\nimport InfoButton from './InfoButton';\nimport CalendarButton from './CalendarButton';\nimport classes from './Header.module.css';\n\nconst Header = () => {\n  return (\n    <div className={classes.header}>\n      <h1>\n        <Link to=\"/\">Staver humle 🐝</Link>\n      </h1>\n      <CalendarButton />\n      <InfoButton />\n    </div>\n  );\n};\n\nexport default Header;\n","import { BadGuess } from '../Hive';\n\ntype Props = { reason: BadGuess };\n\nconst ErrorMessage = ({ reason }: Props) => {\n  let msg = '';\n  switch (reason) {\n    case 'already-found':\n      msg = 'ordet har blitt allerede funnet';\n      break;\n    case 'invalid-letters':\n      msg = 'bruker ugyldige bokstaver';\n      break;\n    case 'missing-center':\n      msg = 'mangler obligatorisk bokstaven';\n      break;\n    case 'too-short':\n      msg = 'for kort';\n      break;\n    case 'unknown-word':\n      msg = 'ukjent ord';\n      break;\n    default:\n      return null;\n  }\n\n  return <span>{msg}</span>;\n};\n\nexport default ErrorMessage;\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport ErrorMessage from './ErrorMessage';\nimport { BadGuess } from '../Hive';\nimport classes from './Messages.module.css';\n\nconst Messages = () => {\n  const [displayedMessage, setDisplayedMessage] = useState<\n    BadGuess | 'pangram'\n  >();\n  const timerIdRef = useRef<NodeJS.Timeout | null>();\n\n  const showMessage = useCallback(\n    (msg: BadGuess | 'pangram') => {\n      setDisplayedMessage(msg);\n      if (timerIdRef.current) {\n        clearTimeout(timerIdRef.current);\n      }\n      timerIdRef.current = setTimeout(() => {\n        setDisplayedMessage(undefined);\n        timerIdRef.current = null;\n      }, 2500);\n    },\n    [timerIdRef, setDisplayedMessage]\n  );\n\n  const onBadGuess = useCallback(\n    (e) => {\n      const badGuess = (e as CustomEvent<string>).detail as BadGuess;\n      showMessage(badGuess);\n    },\n    [showMessage]\n  );\n\n  const onPangram = useCallback(() => {\n    showMessage('pangram');\n  }, [showMessage]);\n\n  useEffect(() => {\n    window.addEventListener('bad-guess', onBadGuess);\n    window.addEventListener('pangram', onPangram);\n    return () => {\n      window.removeEventListener('bad-guess', onBadGuess);\n      window.removeEventListener('pangram', onPangram);\n    };\n  }, [onBadGuess, onPangram]);\n\n  const message = useMemo(() => {\n    if (!displayedMessage) {\n      return null;\n    }\n\n    if (displayedMessage === 'pangram') {\n      return <span className={classes.pangram}>Pangram!</span>;\n    }\n\n    return <ErrorMessage reason={displayedMessage} />;\n  }, [displayedMessage]);\n\n  return <div className={classes.container}>{message}</div>;\n};\n\nexport default Messages;\n","import { useLetters } from 'LettersProvider';\nimport { useWords } from 'WordProvider';\nimport classes from './Grid.module.css';\n\nconst EMPTY = <span className={classes.filler}>&ndash;</span>;\n\nconst Grid = () => {\n  const { words } = useWords();\n  const { all } = useLetters();\n\n  const [shortest, longest] = words.reduce(\n    ([min, max], word) => {\n      return [Math.min(min, word.length), Math.max(max, word.length)];\n    },\n    [1000, 3]\n  );\n\n  const columns = [\n    <th key=\"blank\">&nbsp;</th>, //\n  ];\n  const totals = [];\n  for (let i = shortest; i <= longest; i += 1) {\n    columns.push(<th key={i}>{i}</th>);\n\n    const count = words.filter((word) => word.length === i).length;\n    totals.push(<td key={`total @ ${i}`}>{count || EMPTY}</td>);\n  }\n  columns.push(<th key=\"column-sum\">Σ</th>);\n\n  const body = [];\n  for (let i = 0; i < all.length; i += 1) {\n    const letter = all[i];\n    const matchingWords = words.filter((word) => word[0] === letter);\n\n    const cells = [\n      <td key={letter} className={[classes.border, classes.letter].join(' ')}>\n        {letter}\n      </td>,\n    ];\n    for (let i = shortest; i <= longest; i += 1) {\n      const matchingLength = matchingWords.filter((word) => word.length === i)\n        .length;\n      cells.push(<td key={`${letter} @ ${i}`}>{matchingLength || EMPTY}</td>);\n    }\n    cells.push(\n      <td key={`${letter} @ total`} className={classes.border}>\n        {matchingWords.length || EMPTY}\n      </td>\n    );\n\n    body.push(<tr key={`row-${letter}`}>{cells}</tr>);\n  }\n\n  body.push(\n    <tr key=\"row-totals\" className={classes.border}>\n      <td>Σ</td>\n      {totals}\n      <td>{words.length}</td>\n    </tr>\n  );\n\n  return (\n    <table className={classes.grid}>\n      <thead>\n        <tr className={classes.border}>{columns}</tr>\n      </thead>\n      <tbody>{body}</tbody>\n    </table>\n  );\n};\n\nexport default Grid;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useGameId } from '../hooks';\n\nconst getSavedWords = (key: string) => {\n  try {\n    const item = localStorage.getItem(key);\n    if (item) {\n      const saved = JSON.parse(item);\n      if (Array.isArray(saved)) {\n        return saved.filter((word) => typeof word === 'string');\n      }\n    }\n  } catch (ex) {\n    // Do nothing\n  }\n  return [];\n};\n\nexport const useFoundWords = () => {\n  const { gameId } = useGameId();\n  const key = `saved/${gameId}`;\n\n  const [found, setStateFound] = useState<string[]>([]);\n\n  const addFoundWord = useCallback(\n    (newWord) => {\n      setStateFound((existing) => {\n        const newWords = [...existing, newWord].sort();\n        localStorage.setItem(key, JSON.stringify(newWords));\n        return newWords;\n      });\n    },\n    [setStateFound, key]\n  );\n\n  useEffect(() => {\n    setStateFound(getSavedWords(key));\n  }, [key, setStateFound]);\n\n  return {\n    found,\n    addFoundWord,\n  };\n};\n","import { createContext, useCallback } from 'react';\nimport { useLetters } from '../LettersProvider';\nimport { useWords } from '../WordProvider';\nimport Found from './Found';\nimport Buttons from './Buttons';\nimport Progress from './Progress';\nimport Header from './Header';\nimport Messages from './Messages';\nimport Grid from './Grid';\nimport classes from './Hive.module.css';\nimport { useFoundWords } from './useFoundWords';\nimport isPangram from '../isPangram';\n\nexport type BadGuess =\n  | 'too-short'\n  | 'missing-center'\n  | 'already-found'\n  | 'unknown-word'\n  | 'invalid-letters';\n\ntype ContextType = {\n  found: string[];\n  onGuess: (guess: string) => void;\n};\n\nexport const Context = createContext<ContextType>({\n  found: [],\n  onGuess: () => undefined,\n});\n\nconst Hive = () => {\n  const { all, centerLetter } = useLetters();\n  const { words } = useWords();\n\n  const { found, addFoundWord } = useFoundWords();\n\n  const makeGuess = useCallback(\n    (input: string) => {\n      if (!input) {\n        // No error message for this.\n        return;\n      }\n\n      const word = input\n        .toLocaleLowerCase()\n        .split('')\n        .filter((letter) => all.includes(letter))\n        .join('');\n\n      if (word.length !== input.length) {\n        dispatchEvent(\n          new CustomEvent('bad-guess', { detail: 'invalid-letters' })\n        );\n        return;\n      }\n\n      if (word.length < 4) {\n        dispatchEvent(new CustomEvent('bad-guess', { detail: 'too-short' }));\n        return;\n      }\n\n      if (!word.includes(centerLetter)) {\n        dispatchEvent(\n          new CustomEvent('bad-guess', { detail: 'missing-center' })\n        );\n        return;\n      }\n\n      if (found.includes(word)) {\n        dispatchEvent(\n          new CustomEvent('bad-guess', { detail: 'already-found' })\n        );\n        return;\n      }\n\n      if (!words.includes(word)) {\n        dispatchEvent(new CustomEvent('bad-guess', { detail: 'unknown-word' }));\n        return;\n      }\n\n      addFoundWord(word);\n      if (isPangram(word)) {\n        dispatchEvent(new CustomEvent('pangram'));\n      }\n    },\n    [all, centerLetter, found, words, addFoundWord]\n  );\n\n  return (\n    <Context.Provider value={{ found, onGuess: makeGuess }}>\n      <div className={classes.container}>\n        <Header />\n        <div className={classes.gameContainer}>\n          <div className={classes.buttonsContainer}>\n            <Messages />\n            <Buttons />\n          </div>\n          <div className={classes.column}>\n            <Progress />\n            <Found />\n            <Grid />\n          </div>\n        </div>\n      </div>\n    </Context.Provider>\n  );\n};\n\nexport default Hive;\n","import WordsProvider from 'WordProvider';\nimport LettersProvider from 'LettersProvider';\nimport Hive from 'Hive';\n\nconst Play = () => {\n  return (\n    <LettersProvider>\n      <WordsProvider>\n        <Hive />\n      </WordsProvider>\n    </LettersProvider>\n  );\n};\n\nexport default Play;\n","import './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Play from './pages/Play';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Play />\n        </Route>\n\n        <Route path=\"/:gameId\">\n          <Play />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}