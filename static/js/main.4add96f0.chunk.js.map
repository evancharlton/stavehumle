{"version":3,"sources":["Hive/Grid/Grid.module.css","Hive/Buttons/Buttons.module.css","Hive/Header/CalendarButton/DatePicker/DatePicker.module.css","Modal/Modal.module.css","Hive/Hive.module.css","Hive/Header/HeaderButton.module.css","Hive/Found/Found.module.css","Hive/Progress/Progress.module.css","Loading/Loading.module.css","Hive/Messages/Messages.module.css","Hive/Found/WordsInfo/WordsInfo.module.css","Hive/Header/InfoButton/InfoButton.module.css","Hive/Header/CalendarButton/CalendarButton.module.css","Hive/Header/Header.module.css","Hive/Grid/GridInfo/GridInfo.module.css","api.ts","hashcode.ts","twoDigits.ts","hooks.ts","useNoBodyScroll.ts","Loading/Loading.tsx","LettersProvider/LettersProvider.tsx","LettersProvider/useLetters.ts","WordProvider/WordsProvider.tsx","WordProvider/useWords.ts","isPangram.ts","Hive/hooks.ts","Modal/Modal.tsx","Hive/Found/WordsInfo/WordsInfo.tsx","Hive/Found/Found.tsx","shuffle.ts","Hive/Buttons/useShuffledLetters.ts","Hive/Buttons/Buttons.tsx","Hive/Progress/Progress.tsx","Hive/Header/InfoButton/InfoButton.tsx","Hive/Header/CalendarButton/DatePicker/DatePicker.tsx","Hive/Header/CalendarButton/CalendarButton.tsx","Hive/Header/Header.tsx","Hive/Messages/ErrorMessage.tsx","Hive/Messages/Messages.tsx","Hive/Grid/WordGrid/WordGrid.tsx","Hive/Grid/GridInfo/GridInfo.tsx","Hive/Grid/Grid.tsx","Hive/useFoundWords.ts","Hive/Hive.tsx","pages/Play/Play.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","gzipJsonFetch","url","fetch","headers","then","resp","arrayBuffer","buf","Uint8Array","pako","inflate","TextDecoder","decode","str","JSON","parse","hashCode","input","hash","i","length","charCodeAt","twoDigits","v","TODAY","now","Date","getFullYear","getMonth","getDate","map","join","isProbablyDate","ymd","rest","Number","year","month","day","useGameId","gameIdParam","useParams","gameId","match","gameHash","hashcode","isDate","useNoBodyScroll","useEffect","document","body","classList","add","remove","Loading","className","classes","container","ldsRipple","Context","createContext","centerLetter","outerLetters","all","LettersProvider","children","useState","option","setOption","error","setError","process","options","catch","e","console","letters","split","filter","letter","Provider","value","useLetters","useContext","words","GameCreator","setWords","key","substring","obj","loadedWords","word","includes","message","useWords","isPangram","Set","size","useScore","score","useMemo","bonus","reduce","total","wordScore","useGame","Modal","title","onClose","onKeyDown","useCallback","window","addEventListener","removeEventListener","modalBackground","modal","header","onClick","contents","footer","WordsInfo","showing","setShowing","href","target","rel","button","Found","found","cleaned","Object","keys","acc","wordList","encodeURIComponent","shuffle","original","a","sort","Math","random","b","useShuffledLetters","shuffled","setShuffled","shuffleLetters","reshuffle","Buttons","onGuess","guess","setGuess","guessRef","useRef","current","makeGuess","onLetterClick","event","currentTarget","getAttribute","g","onBackspace","substr","onKeyPress","preventDefault","toLocaleLowerCase","LetterButton","data-letter","letterButton","Boolean","CenterLetterButton","props","letterButtons","topRow","middleRow","bottomRow","controls","Progress","currentPoints","totalPoints","bars","id","max","htmlFor","help","InfoButton","headerClasses","MONTHS","today","DatePicker","onChange","currentGameDate","setYear","setMonth","changeYear","delta","y","changeMonth","m","added","monthGrid","dayOfWeek","getDay","cells","push","filler","daysInMonth","isToday","isCurrent","classNames","dateButton","todayButton","currentButton","center","CalendarButton","history","useHistory","onNewDatePicked","Header","to","ErrorMessage","msg","reason","Messages","displayedMessage","setDisplayedMessage","timerIdRef","showMessage","clearTimeout","setTimeout","undefined","onBadGuess","badGuess","detail","onPangram","pangram","EMPTY","WordGrid","range","shortest","longest","columns","totals","count","matchingWords","border","matchingLength","grid","Info","cls","Grid","foundWords","allWords","mode","setMode","gridWords","foundLookup","min","active","remaining","GridInfo","useFoundWords","setStateFound","addFoundWord","newWord","existing","newWords","localStorage","setItem","stringify","item","getItem","saved","Array","isArray","ex","getSavedWords","Hive","dispatchEvent","CustomEvent","gameContainer","buttonsContainer","column","Play","WordsProvider","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4add96f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__1BRwy\",\"border\":\"Grid_border__20nNQ\",\"letter\":\"Grid_letter__FpcEt\",\"filler\":\"Grid_filler__1NEAc\",\"header\":\"Grid_header__3S9Ui\",\"mode\":\"Grid_mode__ZZq8Y\",\"active\":\"Grid_active__1KhoH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Buttons_container__1Zt8k\",\"guess\":\"Buttons_guess__2Anft\",\"letterButton\":\"Buttons_letterButton__1mMw1\",\"centerLetter\":\"Buttons_centerLetter__35133\",\"letterButtons\":\"Buttons_letterButtons__3XtpL\",\"controls\":\"Buttons_controls__vjaFF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"DatePicker_header__3oWo4\",\"center\":\"DatePicker_center__3IS8k\",\"monthGrid\":\"DatePicker_monthGrid__15JAF\",\"dateButton\":\"DatePicker_dateButton__3t50Y\",\"todayButton\":\"DatePicker_todayButton__USWS_\",\"currentButton\":\"DatePicker_currentButton__3kv-Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Modal_header__2ZLRN\",\"footer\":\"Modal_footer__3LLGM\",\"contents\":\"Modal_contents__2N7hF\",\"modalBackground\":\"Modal_modalBackground__gT2gd\",\"modal\":\"Modal_modal__lEGX8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Hive_container__1Zjua\",\"gameContainer\":\"Hive_gameContainer__23RNb\",\"buttonsContainer\":\"Hive_buttonsContainer__3BlGP\",\"column\":\"Hive_column__uIVAh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"HeaderButton_button__2v-ld\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Found_container__1IG7c\",\"wordList\":\"Found_wordList__kw6ut\",\"word\":\"Found_word__XXr99\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Progress_container__2gTl_\",\"bars\":\"Progress_bars__3T60p\",\"help\":\"Progress_help__17CCm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Loading_container__3Q6Jl\",\"ldsRipple\":\"Loading_ldsRipple__3LZlq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Messages_container__r77DS\",\"pangram\":\"Messages_pangram__2KAkr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"WordsInfo_button__18cOS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"InfoButton_button__3liaB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CalendarButton_button__317hN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Yh4QF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"GridInfo_button__rmqfM\"};","import pako from 'pako';\n\nexport const jsonFetch = (url: string) =>\n  fetch(url, { headers: { 'Content-Type': 'application/json' } }).then((resp) =>\n    resp.json()\n  );\n\nexport const gzipJsonFetch = (url: string) =>\n  fetch(url, {\n    headers: { 'Content-Type': 'application/json', 'Content-Encoding': 'gzip' },\n  })\n    .then((resp) => resp.arrayBuffer())\n    .then((buf) => new Uint8Array(buf))\n    .then((buf) => pako.inflate(buf))\n    .then((buf) => new TextDecoder('utf-8').decode(buf))\n    .then((str) => JSON.parse(str));\n","const hashCode = (input: string) => {\n  let hash = 0;\n  for (let i = 0; i < input.length; i += 1) {\n    const char = input.charCodeAt(i);\n    hash = 31 * hash + char;\n  }\n  return hash;\n};\n\nexport default hashCode;\n","const twoDigits = (v: number) => {\n  if (v < 10) {\n    return `0${v}`;\n  }\n  return v;\n};\n\nexport default twoDigits;\n","import { useParams } from 'react-router-dom';\nimport hashcode from './hashcode';\nimport twoDigits from './twoDigits';\n\nconst TODAY = (() => {\n  const now = new Date();\n  return [now.getFullYear(), now.getMonth() + 1, now.getDate()]\n    .map(twoDigits)\n    .join('-');\n})();\n\nconst isProbablyDate = (ymd: unknown[] | null) => {\n  if (!ymd) {\n    return false;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_, ...rest] = ymd;\n  if (rest.length !== 3) {\n    return false;\n  }\n\n  const [year, month, day] = rest.map(Number);\n  // Yeah, it's a best-effort thing.\n  return year && month >= 1 && month <= 12 && day >= 1 && day <= 31;\n};\n\nexport const useGameId = () => {\n  const { gameId: gameIdParam } = useParams<{ gameId?: string }>();\n  const gameId = gameIdParam ?? TODAY;\n\n  const match = gameId.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/);\n\n  return { gameId, gameHash: hashcode(gameId), isDate: isProbablyDate(match) };\n};\n","import { useEffect } from 'react';\n\nexport const useNoBodyScroll = () => {\n  useEffect(() => {\n    document.body.classList.add('no-scroll');\n    return () => {\n      document.body.classList.remove('no-scroll');\n    };\n  }, []);\n};\n","import { useNoBodyScroll } from '../useNoBodyScroll';\nimport classes from './Loading.module.css';\n\nconst Loading = () => {\n  useNoBodyScroll();\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.ldsRipple}>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import { createContext, useEffect, useState } from 'react';\nimport { gzipJsonFetch } from '../api';\nimport { useGameId } from '../hooks';\nimport Loading from '../Loading';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype ContextType = {\n  centerLetter: string;\n  outerLetters: [string, string, string, string, string, string];\n  all: string;\n};\n\nexport const Context = createContext<ContextType>({\n  centerLetter: '',\n  outerLetters: ['', '', '', '', '', ''],\n  all: '',\n});\n\nconst LettersProvider = ({ children }: Props) => {\n  const { gameHash } = useGameId();\n  const [option, setOption] = useState('');\n  const [error, setError] = useState<Error | undefined>();\n\n  useEffect(() => {\n    gzipJsonFetch(`${process.env.PUBLIC_URL}/words/options.json.gz`)\n      .then((options) => options[gameHash % options.length])\n      .then(setOption)\n      .catch((e) => {\n        console.error(e);\n        setError(e);\n      });\n  }, [gameHash]);\n\n  if (error) {\n    return <div>Error!</div>;\n  }\n\n  if (!option) {\n    return <Loading />;\n  }\n\n  const letters = option.split('');\n  const centerLetter = letters[gameHash % letters.length];\n  const outerLetters = letters.filter(\n    (letter) => letter !== centerLetter\n  ) as ContextType['outerLetters'];\n\n  return (\n    <Context.Provider value={{ centerLetter, outerLetters, all: option }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default LettersProvider;\n","import { useContext } from 'react';\nimport { Context } from './LettersProvider';\n\nexport const useLetters = () => {\n  return useContext(Context);\n};\n","import { createContext, useEffect, useState } from 'react';\nimport { gzipJsonFetch } from '../api';\nimport { useLetters } from '../LettersProvider';\nimport Loading from '../Loading';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype ContextType = {\n  words: string[];\n};\n\nexport const Context = createContext<ContextType>({\n  words: [],\n});\n\nconst GameCreator = ({ children }: Props) => {\n  const { all, centerLetter } = useLetters();\n\n  const [words, setWords] = useState<string[]>([]);\n  const [error, setError] = useState<Error | undefined>();\n\n  useEffect(() => {\n    const key = all.substring(0, 3);\n    const url = `${process.env.PUBLIC_URL}/words/${key}.json.gz`;\n    gzipJsonFetch(url)\n      .then((obj) => obj[all])\n      .then((loadedWords) =>\n        loadedWords.filter((word: string) => word.includes(centerLetter))\n      )\n      .then(setWords)\n      .catch(setError);\n  }, [all, centerLetter]);\n\n  if (error) {\n    return <pre>{error.message}</pre>;\n  }\n\n  if (words.length === 0) {\n    return <Loading />;\n  }\n\n  return <Context.Provider value={{ words }}>{children}</Context.Provider>;\n};\n\nexport default GameCreator;\n","import { useContext } from 'react';\nimport { Context } from './WordsProvider';\n\nexport const useWords = () => {\n  return useContext(Context);\n};\n","const isPangram = (str: string) => {\n  return new Set(str.split('')).size === 7;\n};\n\nexport default isPangram;\n","import { useContext, useMemo } from 'react';\nimport isPangram from '../isPangram';\nimport { Context } from './Hive';\n\nexport const useScore = (words: string[]) => {\n  const score = useMemo(() => {\n    return words\n      .map((word) => {\n        if (word.length === 4) {\n          return 1;\n        }\n\n        if (word.length < 7) {\n          return word.length;\n        }\n\n        const bonus = isPangram(word) ? 7 : 0;\n        return word.length + bonus;\n      })\n      .reduce((total, wordScore) => total + wordScore, 0);\n  }, [words]);\n\n  return { score };\n};\n\nexport const useGame = () => {\n  return useContext(Context);\n};\n","import classes from './Modal.module.css';\nimport { MdClose as Close } from 'react-icons/md';\nimport { useNoBodyScroll } from '../useNoBodyScroll';\nimport { useCallback, useEffect } from 'react';\n\ntype Props = {\n  title: string;\n  children: React.ReactNode;\n  onClose: () => void;\n};\n\nconst Modal = ({ children, title, onClose }: Props) => {\n  useNoBodyScroll();\n\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    },\n    [onClose]\n  );\n\n  useEffect(() => {\n    window.addEventListener('keydown', onKeyDown);\n    return () => {\n      window.removeEventListener('keydown', onKeyDown);\n    };\n  }, [onKeyDown]);\n\n  return (\n    <div className={classes.modalBackground}>\n      <div className={classes.modal}>\n        <div className={classes.header}>\n          <h2>{title}</h2>\n          <button onClick={onClose}>\n            <Close />\n          </button>\n        </div>\n        <div className={classes.contents}>{children}</div>\n        <div className={classes.footer}>\n          <button onClick={onClose}>Lukk</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import classes from './WordsInfo.module.css';\nimport { useMemo, useState } from 'react';\nimport { MdHelpOutline as HelpIcon } from 'react-icons/md';\nimport Modal from 'Modal';\n\nconst WordsInfo = () => {\n  const [showing, setShowing] = useState(false);\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return false;\n    }\n    return (\n      <Modal title=\"«Hva er disse ordene?»\" onClose={() => setShowing(false)}>\n        <p>\n          Ordene som brukes her kommer fra den{' '}\n          <a\n            href=\"https://www.nb.no/sprakbanken/ressurskatalog/oai-nb-no-sbr-5/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Norsk ordbank\n          </a>\n          . Alle ordene stemmer, men noen ord blir sjelden (eller aldri) sett i\n          det virkelige liv.\n        </p>\n        <p>\n          <a\n            href=\"mailto:evancharlton+humle@gmail.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Skriv en e-post\n          </a>{' '}\n          hvis du finner et galt ord 😀\n        </p>\n      </Modal>\n    );\n  }, [showing]);\n\n  return (\n    <>\n      <button onClick={() => setShowing(true)} className={classes.button}>\n        <HelpIcon />\n      </button>\n      {modal}\n    </>\n  );\n};\n\nexport default WordsInfo;\n","import { useMemo } from 'react';\nimport { useGame } from '../hooks';\nimport classes from './Found.module.css';\nimport WordsInfo from './WordsInfo';\n\nconst Found = () => {\n  const { found: words } = useGame();\n  const cleaned = useMemo(() => {\n    const foo = Object.keys(\n      words.reduce((acc, word) => ({ ...acc, [word]: true }), {})\n    );\n    return foo;\n  }, [words]);\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.wordList}>\n        {cleaned.map((word) => (\n          <a\n            className={classes.word}\n            key={word}\n            href={`https://naob.no/s%C3%B8k/${encodeURIComponent(word)}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {word}\n          </a>\n        ))}\n      </div>\n      <WordsInfo />\n    </div>\n  );\n};\n\nexport default Found;\n","const shuffle = (original: string[]) =>\n  original\n    .map((a) => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => a.value);\n\nexport default shuffle;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useLetters } from 'LettersProvider';\nimport shuffle from 'shuffle';\n\nconst useShuffledLetters = () => {\n  const { outerLetters } = useLetters();\n  const [shuffled, setShuffled] = useState<string[]>([]);\n\n  const shuffleLetters = useCallback(() => {\n    setShuffled(shuffle(outerLetters));\n  }, [outerLetters]);\n\n  useEffect(() => {\n    setShuffled(shuffle(outerLetters));\n  }, [outerLetters, setShuffled]);\n\n  return {\n    shuffled,\n    reshuffle: shuffleLetters,\n  };\n};\n\nexport default useShuffledLetters;\n","import {\n  MdKeyboardBackspace as Backspace,\n  MdRefresh as Shuffle,\n  MdKeyboardReturn as Enter,\n} from 'react-icons/md';\nimport classes from './Buttons.module.css';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useLetters } from 'LettersProvider';\nimport { useGame } from '../hooks';\nimport useShuffledLetters from './useShuffledLetters';\n\nconst Buttons = () => {\n  const { onGuess } = useGame();\n\n  const { all, centerLetter, outerLetters } = useLetters();\n  const [guess, setGuess] = useState('');\n  const { shuffled, reshuffle } = useShuffledLetters();\n\n  const guessRef = useRef('');\n  guessRef.current = guess;\n\n  useEffect(() => {\n    guessRef.current = '';\n    setGuess('');\n  }, [outerLetters, centerLetter]);\n\n  const makeGuess = useCallback(() => {\n    onGuess(guessRef.current);\n    setGuess('');\n  }, [onGuess, guessRef]);\n\n  const onLetterClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      const button = event.currentTarget;\n      const letter = button.getAttribute('data-letter');\n      setGuess((g) => `${g}${letter}`);\n    },\n    [setGuess]\n  );\n\n  const onBackspace = useCallback(() => {\n    setGuess((g) => g.substr(0, g.length - 1));\n  }, [setGuess]);\n\n  const onKeyPress = useCallback(\n    (e: KeyboardEvent) => {\n      const { key } = e;\n\n      if (key === 'Backspace') {\n        setGuess((g) => g.substring(0, g.length - 1));\n        return;\n      }\n\n      if (key === ' ') {\n        reshuffle();\n        e.preventDefault();\n        return;\n      }\n\n      if (key === 'Enter') {\n        makeGuess();\n      }\n\n      if (!all.includes(key.toLocaleLowerCase())) {\n        return;\n      }\n\n      setGuess((g) => `${g}${key}`);\n    },\n    [all, makeGuess, reshuffle]\n  );\n\n  useEffect(() => {\n    document.addEventListener('keydown', onKeyPress);\n    return () => {\n      document.removeEventListener('keydown', onKeyPress);\n    };\n  }, [onKeyPress]);\n\n  type LetterButtonProps = { letter: string } & JSX.IntrinsicElements['button'];\n\n  const LetterButton = ({ letter, className, ...rest }: LetterButtonProps) => {\n    return (\n      <button\n        data-letter={letter}\n        onClick={onLetterClick}\n        className={[classes.letterButton, className].filter(Boolean).join(' ')}\n        {...rest}\n      >\n        {letter}\n      </button>\n    );\n  };\n\n  const CenterLetterButton = (props: LetterButtonProps) => (\n    <LetterButton {...props} className={classes.centerLetter} />\n  );\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.guess}>{guess || <>&nbsp;</>}</div>\n      <div className={classes.letterButtons}>\n        <div className={classes.topRow}>\n          <LetterButton letter={shuffled[0]} />\n          <LetterButton letter={shuffled[1]} />\n        </div>\n        <div className={classes.middleRow}>\n          <LetterButton letter={shuffled[2]} />\n          <CenterLetterButton letter={centerLetter} />\n          <LetterButton letter={shuffled[3]} />\n        </div>\n        <div className={classes.bottomRow}>\n          <LetterButton letter={shuffled[4]} />\n          <LetterButton letter={shuffled[5]} />\n        </div>\n      </div>\n      <div className={classes.controls}>\n        <button onClick={onBackspace}>\n          <Backspace />\n        </button>\n        <button onClick={reshuffle}>\n          <Shuffle />\n        </button>\n        <button onClick={makeGuess}>\n          <Enter />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Buttons;\n","import { useWords } from 'WordProvider';\nimport { useGame, useScore } from '../hooks';\nimport classes from './Progress.module.css';\nimport { MdHelpOutline as Help } from 'react-icons/md';\nimport { useMemo, useState } from 'react';\nimport Modal from 'Modal';\n\nconst Progress = () => {\n  const { found } = useGame();\n  const { words } = useWords();\n\n  const { score: currentPoints } = useScore(found);\n  const { score: totalPoints } = useScore(words);\n\n  const [showing, setShowing] = useState(false);\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return null;\n    }\n\n    return (\n      <Modal title=\"Poeng\" onClose={() => setShowing(false)}>\n        <p>\n          Poengene beregnes ut fra hvor mange ord som blir funnet. Hvert ord har\n          ulike poengsummer.\n        </p>\n        <ul>\n          <li>\n            ord på fire bokstaver er verdt <strong>ett poeng</strong>\n          </li>\n          <li>\n            hver bokstave etter fire er verdt <strong>ett ekstra poeng</strong>\n          </li>\n          <li>\n            ord som bruker alle bokstavenve minst en gang (et pangram) gir{' '}\n            <strong>syv ekstra poeng</strong>\n          </li>\n        </ul>\n        <h3>Eksempel</h3>\n        <p>\n          H&nbsp;I&nbsp;K&nbsp;L&nbsp;O&nbsp;S&nbsp;<strong>T</strong>\n        </p>\n        <ul>\n          <li>\n            <strong>hist</strong> er 4 poeng\n          </li>\n          <li>\n            <strong>hittil</strong> er 6 poeng\n          </li>\n          <li>\n            <strong>holistisk</strong> er (9 + 7) = 16 poeng\n          </li>\n        </ul>\n      </Modal>\n    );\n  }, [showing]);\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.bars}>\n        <progress id=\"word-progress\" max={words.length} value={found.length} />\n        <label htmlFor=\"word-progress\">\n          Ord: {found.length} / {words.length}\n        </label>\n        <progress\n          id=\"points-progress\"\n          max={totalPoints}\n          value={currentPoints}\n        />\n        <label htmlFor=\"points-progress\">\n          Poeng: {currentPoints} / {totalPoints}\n        </label>\n      </div>\n      <button onClick={() => setShowing(true)} className={classes.help}>\n        <Help />\n      </button>\n      {modal}\n    </div>\n  );\n};\n\nexport default Progress;\n","import { useMemo, useState } from 'react';\nimport { MdInfoOutline as InfoIcon } from 'react-icons/md';\nimport headerClasses from '../HeaderButton.module.css';\nimport classes from './InfoButton.module.css';\nimport Modal from 'Modal';\n\nconst InfoButton = () => {\n  const [showing, setShowing] = useState(false);\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return null;\n    }\n    return (\n      <Modal title=\"Staver Humle!\" onClose={() => setShowing(false)}>\n        <p>\n          Staver Humle er et ordspill hvor du lage så mange ord som du kan.\n          Hvert puslespill har syv ulike bokstaver&mdash;en fast i midten og\n          seks rundt.\n        </p>\n        <h3>Reglene</h3>\n        <p>Hvert ord:</p>\n        <ul>\n          <li>\n            <strong>må bruke</strong> den midterste bokstaven\n          </li>\n          <li>\n            være minst <strong>fire bokstaver</strong> lange\n          </li>\n          <li>\n            bruker <strong>bare</strong> de syv bokstavene\n            <br />\n            (men bokstaver kan gjentas)\n          </li>\n        </ul>\n        <p>\n          Hver puslespill har <strong>minst ett</strong> ord som bruker{' '}\n          <strong>alle bokstavene</strong>.\n        </p>\n        <p>\n          Det er en ny puslespill <strong>hver dag!</strong>\n        </p>\n        <p>Lykke til!</p>\n        <p>\n          <em>\n            (Want to play in English? Try the{' '}\n            <a\n              href=\"https://www.nytimes.com/puzzles/spelling-bee\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              NYT Spelling Bee\n            </a>\n            !)\n          </em>\n        </p>\n      </Modal>\n    );\n  }, [showing]);\n\n  return (\n    <>\n      <button\n        onClick={() => setShowing(true)}\n        className={[headerClasses.button, classes.button]\n          .filter(Boolean)\n          .join(' ')}\n      >\n        <InfoIcon />\n      </button>\n      {modal}\n    </>\n  );\n};\n\nexport default InfoButton;\n","import { useMemo, useState } from 'react';\nimport classes from './DatePicker.module.css';\nimport {\n  BsChevronDoubleLeft as BackYear,\n  BsChevronDoubleRight as ForwardYear,\n  BsChevronLeft as BackMonth,\n  BsChevronRight as ForwardMonth,\n} from 'react-icons/bs';\nimport { useGameId } from 'hooks';\nimport twoDigits from 'twoDigits';\n\ntype Props = {\n  onChange: (gameId: string) => void;\n};\n\nconst MONTHS = [\n  'januar',\n  'februar',\n  'mars',\n  'april',\n  'mai',\n  'juni',\n  'juli',\n  'august',\n  'september',\n  'oktober',\n  'november',\n  'desember',\n];\n\nconst today = new Date();\n\nconst DatePicker = ({ onChange }: Props) => {\n  const { gameId, isDate } = useGameId();\n  const currentGameDate = useMemo(() => {\n    return isDate ? new Date(gameId) : null;\n  }, [isDate, gameId]);\n\n  const [year, setYear] = useState((currentGameDate || today).getFullYear());\n  const [month, setMonth] = useState((currentGameDate || today).getMonth());\n\n  const changeYear = (delta: 1 | -1) => () => {\n    setYear((y) => y + delta);\n  };\n\n  const changeMonth = (delta: 1 | -1) => () => {\n    setMonth((m) => {\n      const added = m + delta;\n      if (added < 0) {\n        setYear((y) => y - 1);\n        return 11;\n      }\n      if (added >= 12) {\n        setYear((y) => y + 1);\n        return 0;\n      }\n      return added;\n    });\n  };\n\n  const monthGrid = useMemo(() => {\n    const start = new Date(year, month, 1);\n    const dayOfWeek = start.getDay();\n\n    const cells = [];\n    for (let i = 0; i < dayOfWeek; i += 1) {\n      cells.push(\n        <div key={`filler-${i}`} className={classes.filler}>\n          &nbsp;\n        </div>\n      );\n    }\n\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    for (let i = 1; i <= daysInMonth; i += 1) {\n      const isToday =\n        year === today.getFullYear() &&\n        month === today.getMonth() &&\n        i === today.getDate();\n\n      const isCurrent =\n        currentGameDate &&\n        year === currentGameDate.getFullYear() &&\n        month === currentGameDate.getMonth() &&\n        i === currentGameDate.getDate();\n\n      const classNames = [classes.dateButton];\n      if (isToday) {\n        classNames.push(classes.todayButton);\n      }\n      if (isCurrent) {\n        classNames.push(classes.currentButton);\n      }\n\n      cells.push(\n        <button\n          key={`date-${i}`}\n          className={classNames.join(' ')}\n          onClick={() => {\n            onChange(`${year}-${twoDigits(month + 1)}-${twoDigits(i)}`);\n          }}\n        >\n          {i}\n        </button>\n      );\n    }\n\n    return <div className={classes.monthGrid}>{cells}</div>;\n  }, [year, month, onChange, currentGameDate]);\n\n  return (\n    <div>\n      <div className={classes.header}>\n        <button onClick={changeYear(-1)}>\n          <BackYear />\n        </button>\n        <button onClick={changeMonth(-1)}>\n          <BackMonth />\n        </button>\n        <button\n          className={classes.center}\n          onClick={() => {\n            const now = new Date();\n            setYear(now.getFullYear());\n            setMonth(now.getMonth());\n          }}\n        >\n          <span className={classes.year}>{year}</span>\n          &nbsp;/&nbsp;\n          <span className={classes.month}>{MONTHS[month]}</span>\n        </button>\n        <button onClick={changeMonth(1)}>\n          <ForwardMonth />\n        </button>\n        <button onClick={changeYear(1)}>\n          <ForwardYear />\n        </button>\n      </div>\n      {monthGrid}\n    </div>\n  );\n};\n\nexport default DatePicker;\n","import { useCallback, useMemo, useState } from 'react';\nimport { MdToday as CalendarIcon } from 'react-icons/md';\nimport { useHistory } from 'react-router-dom';\nimport Modal from 'Modal';\nimport headerClasses from '../HeaderButton.module.css';\nimport classes from './CalendarButton.module.css';\nimport DatePicker from './DatePicker';\n\nconst CalendarButton = () => {\n  const history = useHistory();\n  const [showing, setShowing] = useState(false);\n\n  const onClose = useCallback(() => {\n    setShowing(false);\n  }, [setShowing]);\n\n  const onNewDatePicked = useCallback(\n    (gameId: string) => {\n      onClose();\n      history.push(`/${gameId}`);\n    },\n    [onClose, history]\n  );\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return null;\n    }\n    return (\n      <Modal title=\"Dato\" onClose={() => setShowing(false)}>\n        <DatePicker onChange={onNewDatePicked} />\n      </Modal>\n    );\n  }, [showing, setShowing, onNewDatePicked]);\n\n  return (\n    <>\n      <button\n        onClick={() => setShowing(true)}\n        className={[headerClasses.button, classes.button]\n          .filter(Boolean)\n          .join(' ')}\n      >\n        <CalendarIcon />\n      </button>\n      {modal}\n    </>\n  );\n};\n\nexport default CalendarButton;\n","import { Link } from 'react-router-dom';\nimport InfoButton from './InfoButton';\nimport CalendarButton from './CalendarButton';\nimport classes from './Header.module.css';\n\nconst Header = () => {\n  return (\n    <div className={classes.header}>\n      <h1>\n        <Link to=\"/\">Staver humle 🐝</Link>\n      </h1>\n      <CalendarButton />\n      <InfoButton />\n    </div>\n  );\n};\n\nexport default Header;\n","import { BadGuess } from '../Hive';\n\ntype Props = { reason: BadGuess };\n\nconst ErrorMessage = ({ reason }: Props) => {\n  let msg = '';\n  switch (reason) {\n    case 'already-found':\n      msg = 'ordet har blitt allerede funnet';\n      break;\n    case 'invalid-letters':\n      msg = 'bruker ugyldige bokstaver';\n      break;\n    case 'missing-center':\n      msg = 'mangler obligatorisk bokstaven';\n      break;\n    case 'too-short':\n      msg = 'for kort';\n      break;\n    case 'unknown-word':\n      msg = 'ukjent ord';\n      break;\n    default:\n      return null;\n  }\n\n  return <span>{msg}</span>;\n};\n\nexport default ErrorMessage;\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport ErrorMessage from './ErrorMessage';\nimport { BadGuess } from '../Hive';\nimport classes from './Messages.module.css';\n\nconst Messages = () => {\n  const [displayedMessage, setDisplayedMessage] = useState<\n    BadGuess | 'pangram'\n  >();\n  const timerIdRef = useRef<NodeJS.Timeout | null>();\n\n  const showMessage = useCallback(\n    (msg: BadGuess | 'pangram') => {\n      setDisplayedMessage(msg);\n      if (timerIdRef.current) {\n        clearTimeout(timerIdRef.current);\n      }\n      timerIdRef.current = setTimeout(() => {\n        setDisplayedMessage(undefined);\n        timerIdRef.current = null;\n      }, 2500);\n    },\n    [timerIdRef, setDisplayedMessage]\n  );\n\n  const onBadGuess = useCallback(\n    (e) => {\n      const badGuess = (e as CustomEvent<string>).detail as BadGuess;\n      showMessage(badGuess);\n    },\n    [showMessage]\n  );\n\n  const onPangram = useCallback(() => {\n    showMessage('pangram');\n  }, [showMessage]);\n\n  useEffect(() => {\n    window.addEventListener('bad-guess', onBadGuess);\n    window.addEventListener('pangram', onPangram);\n    return () => {\n      window.removeEventListener('bad-guess', onBadGuess);\n      window.removeEventListener('pangram', onPangram);\n    };\n  }, [onBadGuess, onPangram]);\n\n  const message = useMemo(() => {\n    if (!displayedMessage) {\n      return null;\n    }\n\n    if (displayedMessage === 'pangram') {\n      return <span className={classes.pangram}>Pangram!</span>;\n    }\n\n    return <ErrorMessage reason={displayedMessage} />;\n  }, [displayedMessage]);\n\n  return <div className={classes.container}>{message}</div>;\n};\n\nexport default Messages;\n","import { useLetters } from '../../../LettersProvider';\nimport classes from '../Grid.module.css';\n\ntype Props = {\n  words: string[];\n  range: [number, number];\n};\n\nconst EMPTY = <span className={classes.filler}>&ndash;</span>;\n\nconst WordGrid = ({ words, range: [shortest, longest] }: Props) => {\n  const { all } = useLetters();\n\n  const columns = [\n    <th key=\"blank\">&nbsp;</th>, //\n  ];\n  const totals = [];\n  for (let i = shortest; i <= longest; i += 1) {\n    columns.push(<th key={i}>{i}</th>);\n\n    const count = words.filter((word) => word.length === i).length;\n    totals.push(<td key={`total @ ${i}`}>{count || EMPTY}</td>);\n  }\n  columns.push(<th key=\"column-sum\">Σ</th>);\n\n  const body = [];\n  for (let i = 0; i < all.length; i += 1) {\n    const letter = all[i];\n    const matchingWords = words.filter((word) => word[0] === letter);\n\n    const cells = [\n      <td key={letter} className={[classes.border, classes.letter].join(' ')}>\n        {letter}\n      </td>,\n    ];\n    for (let i = shortest; i <= longest; i += 1) {\n      const matchingLength = matchingWords.filter((word) => word.length === i)\n        .length;\n      cells.push(<td key={`${letter} @ ${i}`}>{matchingLength || EMPTY}</td>);\n    }\n    cells.push(\n      <td key={`${letter} @ total`} className={classes.border}>\n        {matchingWords.length || EMPTY}\n      </td>\n    );\n\n    body.push(<tr key={`row-${letter}`}>{cells}</tr>);\n  }\n\n  body.push(\n    <tr key=\"row-totals\" className={classes.border}>\n      <td>Σ</td>\n      {totals}\n      <td>{words.length}</td>\n    </tr>\n  );\n\n  return (\n    <table className={classes.grid}>\n      <thead>\n        <tr className={classes.border}>{columns}</tr>\n      </thead>\n      <tbody>{body}</tbody>\n    </table>\n  );\n};\n\nexport default WordGrid;\n","import classes from './GridInfo.module.css';\nimport { MdHelpOutline as HelpIcon } from 'react-icons/md';\nimport { useMemo, useState } from 'react';\nimport Modal from 'Modal';\n\nconst Info = () => {\n  const [showing, setShowing] = useState(false);\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return null;\n    }\n    return (\n      <Modal title=\"Nett\" onClose={() => setShowing(false)}>\n        <p>\n          Nettet er et verktøy for å hjelp du finne alle ordene i puslespillet.\n          Radene er ord som starter med hver bokstave, og kolonnene er hvor\n          mange ord av hver lange.\n        </p>\n        <p>Nettet viser ord totalt, også. Lykke til finner alt!</p>\n      </Modal>\n    );\n  }, [showing, setShowing]);\n\n  return (\n    <>\n      <button className={classes.button} onClick={() => setShowing(true)}>\n        <HelpIcon />\n      </button>\n      {modal}\n    </>\n  );\n};\n\nexport default Info;\n","import { useGame } from 'Hive/hooks';\nimport { useMemo, useState } from 'react';\nimport { useWords } from 'WordProvider';\nimport classes from './Grid.module.css';\nimport WordGrid from './WordGrid';\nimport GridInfo from './GridInfo';\n\nconst cls = (...classNames: (string | boolean)[]): string => {\n  return classNames.filter(Boolean).join(' ');\n};\n\nconst Grid = () => {\n  const { found: foundWords } = useGame();\n  const { words: allWords } = useWords();\n  const [mode, setMode] = useState<'all' | 'remaining' | 'found'>('remaining');\n\n  const gridWords = useMemo(() => {\n    if (mode === 'all') {\n      return allWords;\n    }\n\n    if (mode === 'found') {\n      return foundWords;\n    }\n\n    const foundLookup: Record<string, true> = foundWords.reduce(\n      (acc, word) => ({ ...acc, [word]: true }),\n      {}\n    );\n\n    return allWords.filter((word) => !foundLookup[word]);\n  }, [mode, allWords, foundWords]);\n\n  const range: [number, number] = allWords.reduce(\n    ([min, max], word) => {\n      return [Math.min(min, word.length), Math.max(max, word.length)];\n    },\n    [1000, 3]\n  );\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.header}>\n        <button\n          onClick={() => setMode('found')}\n          className={cls(\n            classes.mode,\n            classes.found,\n            mode === 'found' && classes.active\n          )}\n        >\n          Funnet\n        </button>\n        <button\n          onClick={() => setMode('remaining')}\n          className={cls(\n            classes.mode,\n            classes.remaining,\n            mode === 'remaining' && classes.active\n          )}\n        >\n          Gjenstår\n        </button>\n        <button\n          onClick={() => setMode('all')}\n          className={cls(\n            classes.mode,\n            classes.all,\n            mode === 'all' && classes.active\n          )}\n        >\n          Alt\n        </button>\n        <GridInfo />\n      </div>\n      <WordGrid range={range} words={gridWords} />\n    </div>\n  );\n};\n\nexport default Grid;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useGameId } from '../hooks';\n\nconst getSavedWords = (key: string) => {\n  try {\n    const item = localStorage.getItem(key);\n    if (item) {\n      const saved = JSON.parse(item);\n      if (Array.isArray(saved)) {\n        return saved.filter((word) => typeof word === 'string');\n      }\n    }\n  } catch (ex) {\n    // Do nothing\n  }\n  return [];\n};\n\nexport const useFoundWords = () => {\n  const { gameId } = useGameId();\n  const key = `saved/${gameId}`;\n\n  const [found, setStateFound] = useState<string[]>([]);\n\n  const addFoundWord = useCallback(\n    (newWord) => {\n      setStateFound((existing) => {\n        const newWords = [...existing, newWord].sort();\n        localStorage.setItem(key, JSON.stringify(newWords));\n        return newWords;\n      });\n    },\n    [setStateFound, key]\n  );\n\n  useEffect(() => {\n    setStateFound(getSavedWords(key));\n  }, [key, setStateFound]);\n\n  return {\n    found,\n    addFoundWord,\n  };\n};\n","import { createContext, useCallback } from 'react';\nimport { useLetters } from '../LettersProvider';\nimport { useWords } from '../WordProvider';\nimport Found from './Found';\nimport Buttons from './Buttons';\nimport Progress from './Progress';\nimport Header from './Header';\nimport Messages from './Messages';\nimport Grid from './Grid';\nimport classes from './Hive.module.css';\nimport { useFoundWords } from './useFoundWords';\nimport isPangram from '../isPangram';\n\nexport type BadGuess =\n  | 'too-short'\n  | 'missing-center'\n  | 'already-found'\n  | 'unknown-word'\n  | 'invalid-letters';\n\ntype ContextType = {\n  found: string[];\n  onGuess: (guess: string) => void;\n};\n\nexport const Context = createContext<ContextType>({\n  found: [],\n  onGuess: () => undefined,\n});\n\nconst Hive = () => {\n  const { all, centerLetter } = useLetters();\n  const { words } = useWords();\n\n  const { found, addFoundWord } = useFoundWords();\n\n  const makeGuess = useCallback(\n    (input: string) => {\n      if (!input) {\n        // No error message for this.\n        return;\n      }\n\n      const word = input\n        .toLocaleLowerCase()\n        .split('')\n        .filter((letter) => all.includes(letter))\n        .join('');\n\n      if (word.length !== input.length) {\n        dispatchEvent(\n          new CustomEvent('bad-guess', { detail: 'invalid-letters' })\n        );\n        return;\n      }\n\n      if (word.length < 4) {\n        dispatchEvent(new CustomEvent('bad-guess', { detail: 'too-short' }));\n        return;\n      }\n\n      if (!word.includes(centerLetter)) {\n        dispatchEvent(\n          new CustomEvent('bad-guess', { detail: 'missing-center' })\n        );\n        return;\n      }\n\n      if (found.includes(word)) {\n        dispatchEvent(\n          new CustomEvent('bad-guess', { detail: 'already-found' })\n        );\n        return;\n      }\n\n      if (!words.includes(word)) {\n        dispatchEvent(new CustomEvent('bad-guess', { detail: 'unknown-word' }));\n        return;\n      }\n\n      addFoundWord(word);\n      if (isPangram(word)) {\n        dispatchEvent(new CustomEvent('pangram'));\n      }\n    },\n    [all, centerLetter, found, words, addFoundWord]\n  );\n\n  return (\n    <Context.Provider value={{ found, onGuess: makeGuess }}>\n      <div className={classes.container}>\n        <Header />\n        <div className={classes.gameContainer}>\n          <div className={classes.buttonsContainer}>\n            <Messages />\n            <Buttons />\n          </div>\n          <div className={classes.column}>\n            <Progress />\n            <Found />\n            <Grid />\n          </div>\n        </div>\n      </div>\n    </Context.Provider>\n  );\n};\n\nexport default Hive;\n","import WordsProvider from 'WordProvider';\nimport LettersProvider from 'LettersProvider';\nimport Hive from 'Hive';\n\nconst Play = () => {\n  return (\n    <LettersProvider>\n      <WordsProvider>\n        <Hive />\n      </WordsProvider>\n    </LettersProvider>\n  );\n};\n\nexport default Play;\n","import './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Play from './pages/Play';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Play />\n        </Route>\n\n        <Route path=\"/:gameId\">\n          <Play />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}