{"version":3,"sources":["Hive/Grid/Grid.module.css","Modal/Modal.module.css","Hive/Hive.module.css","Hive/Progress/Progress.module.css","Hive/Found/Found.module.css","Hive/InfoButton/InfoButton.module.css","Hive/Header/Header.module.css","Hive/ErrorDisplay/ErrorDisplay.module.css","pages/Start/Start.tsx","api.ts","hashcode.ts","hooks.ts","LettersProvider/LettersProvider.tsx","LettersProvider/useLetters.ts","WordProvider/WordsProvider.tsx","WordProvider/useWords.ts","Hive/hooks.ts","Hive/Found/Found.tsx","shuffle.ts","Hive/Buttons/Buttons.tsx","Modal/Modal.tsx","Hive/Progress/Progress.tsx","Hive/InfoButton/InfoButton.tsx","Hive/Header/Header.tsx","Hive/ErrorDisplay/ErrorMessage.tsx","Hive/ErrorDisplay/ErrorDisplay.tsx","Hive/Grid/Grid.tsx","Hive/useFoundWords.ts","Hive/Hive.tsx","pages/Play/Play.tsx","App.tsx","reportWebVitals.ts","index.tsx","Hive/Buttons/Buttons.module.css"],"names":["module","exports","twoDigits","v","Start","history","useHistory","useEffect","now","Date","replace","getFullYear","getMonth","getDate","map","join","gzipJsonFetch","url","fetch","headers","then","resp","arrayBuffer","buf","Uint8Array","pako","inflate","TextDecoder","decode","str","JSON","parse","hashCode","input","hash","i","length","charCodeAt","useGameId","gameId","useParams","gameHash","hashcode","Context","createContext","centerLetter","outerLetters","all","LettersProvider","children","useState","option","setOption","error","setError","process","options","catch","e","console","letters","split","filter","letter","Provider","value","useLetters","useContext","words","GameCreator","setWords","key","substring","obj","loadedWords","word","includes","message","useWords","useScore","score","useMemo","Set","size","reduce","total","wordScore","useGame","Found","found","cleaned","Object","keys","acc","className","classes","wordList","href","encodeURIComponent","target","rel","shuffle","original","a","sort","Math","random","b","Buttons","onGuess","guess","setGuess","shuffledOuterLetters","setShuffledOuterLetters","guessRef","useRef","current","makeGuess","useCallback","onLetterClick","event","currentTarget","getAttribute","g","onShuffle","onBackspace","substr","onKeyPress","preventDefault","toLocaleLowerCase","document","addEventListener","removeEventListener","LetterButton","rest","data-letter","onClick","letterButton","Boolean","CenterLetterButton","props","container","letterButtons","topRow","middleRow","bottomRow","controls","Modal","title","onClose","closeRef","focus","body","classList","add","remove","modalBackground","modal","header","ref","contents","footer","Progress","currentPoints","totalPoints","showing","setShowing","bars","id","max","htmlFor","help","InfoButton","button","Header","to","ErrorMessage","msg","reason","ErrorDisplay","badGuess","displayedError","setDisplayedError","timerId","setTimeout","undefined","clearTimeout","EMPTY","filler","Grid","min","shortest","longest","columns","totals","push","count","matchingWords","cells","border","matchingLength","grid","useFoundWords","setStateFound","addFoundWord","newWord","existing","newWords","localStorage","setItem","stringify","item","getItem","saved","Array","isArray","ex","getSavedWords","Hive","setBadGuess","recordBadGuess","etag","gameContainer","buttonsContainer","column","Play","WordsProvider","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.075764a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__1BRwy\",\"border\":\"Grid_border__20nNQ\",\"letter\":\"Grid_letter__FpcEt\",\"filler\":\"Grid_filler__1NEAc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Modal_header__2ZLRN\",\"footer\":\"Modal_footer__3LLGM\",\"contents\":\"Modal_contents__2N7hF\",\"modalBackground\":\"Modal_modalBackground__gT2gd\",\"modal\":\"Modal_modal__lEGX8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Hive_container__1Zjua\",\"gameContainer\":\"Hive_gameContainer__23RNb\",\"buttonsContainer\":\"Hive_buttonsContainer__3BlGP\",\"column\":\"Hive_column__uIVAh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Progress_container__2gTl_\",\"bars\":\"Progress_bars__3T60p\",\"help\":\"Progress_help__17CCm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordList\":\"Found_wordList__kw6ut\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"InfoButton_button__2T6f3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Yh4QF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ErrorDisplay_container__2V7dW\"};","import { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst twoDigits = (v: number) => {\n  if (v < 10) {\n    return `0${v}`;\n  }\n  return v;\n};\n\nconst Start = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    const now = new Date();\n    history.replace(\n      `/${[now.getFullYear(), now.getMonth() + 1, now.getDate()]\n        .map(twoDigits)\n        .join('-')}`\n    );\n  }, [history]);\n\n  return null;\n};\n\nexport default Start;\n","import pako from 'pako';\n\nexport const jsonFetch = (url: string) =>\n  fetch(url, { headers: { 'Content-Type': 'application/json' } }).then((resp) =>\n    resp.json()\n  );\n\nexport const gzipJsonFetch = (url: string) =>\n  fetch(url, {\n    headers: { 'Content-Type': 'application/json', 'Content-Encoding': 'gzip' },\n  })\n    .then((resp) => resp.arrayBuffer())\n    .then((buf) => new Uint8Array(buf))\n    .then((buf) => pako.inflate(buf))\n    .then((buf) => new TextDecoder('utf-8').decode(buf))\n    .then((str) => JSON.parse(str));\n","const hashCode = (input: string) => {\n  let hash = 0;\n  for (let i = 0; i < input.length; i += 1) {\n    const char = input.charCodeAt(i);\n    hash = 31 * hash + char;\n  }\n  return hash;\n};\n\nexport default hashCode;\n","import { useParams } from 'react-router-dom';\nimport hashcode from './hashcode';\n\nexport const useGameId = () => {\n  const { gameId } = useParams<{ gameId: string }>();\n  return { gameId, gameHash: hashcode(gameId) };\n};\n","import { createContext, useEffect, useState } from 'react';\nimport { gzipJsonFetch } from '../api';\nimport { useGameId } from '../hooks';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype ContextType = {\n  centerLetter: string;\n  outerLetters: [string, string, string, string, string, string];\n  all: string;\n};\n\nexport const Context = createContext<ContextType>({\n  centerLetter: '',\n  outerLetters: ['', '', '', '', '', ''],\n  all: '',\n});\n\nconst LettersProvider = ({ children }: Props) => {\n  const { gameHash } = useGameId();\n  const [option, setOption] = useState('');\n  const [error, setError] = useState<Error | undefined>();\n\n  useEffect(() => {\n    gzipJsonFetch(`${process.env.PUBLIC_URL}/words/options.json.gz`)\n      .then((options) => options[gameHash % options.length])\n      .then(setOption)\n      .catch((e) => {\n        console.error(e);\n        setError(e);\n      });\n  }, [gameHash]);\n\n  if (error) {\n    return <div>Error!</div>;\n  }\n\n  if (!option) {\n    return <div>Loading ...</div>;\n  }\n\n  const letters = option.split('');\n  const centerLetter = letters[gameHash % letters.length];\n  const outerLetters = letters.filter(\n    (letter) => letter !== centerLetter\n  ) as ContextType['outerLetters'];\n\n  return (\n    <Context.Provider value={{ centerLetter, outerLetters, all: option }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default LettersProvider;\n","import { useContext } from 'react';\nimport { Context } from './LettersProvider';\n\nexport const useLetters = () => {\n  return useContext(Context);\n};\n","import { createContext, useEffect, useState } from 'react';\nimport { gzipJsonFetch } from '../api';\nimport { useLetters } from '../LettersProvider';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype ContextType = {\n  words: string[];\n};\n\nexport const Context = createContext<ContextType>({\n  words: [],\n});\n\nconst GameCreator = ({ children }: Props) => {\n  const { all, centerLetter } = useLetters();\n\n  const [words, setWords] = useState<string[]>([]);\n  const [error, setError] = useState<Error | undefined>();\n\n  useEffect(() => {\n    const key = all.substring(0, 3);\n    const url = `${process.env.PUBLIC_URL}/words/${key}.json.gz`;\n    gzipJsonFetch(url)\n      .then((obj) => obj[all])\n      .then((loadedWords) =>\n        loadedWords.filter((word: string) => word.includes(centerLetter))\n      )\n      .then(setWords)\n      .catch(setError);\n  }, [all, centerLetter]);\n\n  if (error) {\n    return <pre>{error.message}</pre>;\n  }\n\n  if (words.length === 0) {\n    return <div>Loading ...</div>;\n  }\n\n  return <Context.Provider value={{ words }}>{children}</Context.Provider>;\n};\n\nexport default GameCreator;\n","import { useContext } from 'react';\nimport { Context } from './WordsProvider';\n\nexport const useWords = () => {\n  return useContext(Context);\n};\n","import { useContext, useMemo } from 'react';\nimport { Context } from './Hive';\n\nexport const useScore = (words: string[]) => {\n  const score = useMemo(() => {\n    return words\n      .map((word) => {\n        if (word.length === 4) {\n          return 1;\n        }\n\n        if (word.length < 7) {\n          return word.length;\n        }\n\n        const letters = new Set(word.split(''));\n        return (letters.size === 7 ? 7 : 0) + word.length;\n      })\n      .reduce((total, wordScore) => total + wordScore, 0);\n  }, [words]);\n\n  return { score };\n};\n\nexport const useGame = () => {\n  return useContext(Context);\n};\n","import { useMemo } from 'react';\nimport { useGame } from '../hooks';\nimport classes from './Found.module.css';\n\nconst Found = () => {\n  const { found: words } = useGame();\n  const cleaned = useMemo(() => {\n    const foo = Object.keys(\n      words.reduce((acc, word) => ({ ...acc, [word]: true }), {})\n    );\n    return foo;\n  }, [words]);\n  return (\n    <ul className={classes.wordList}>\n      {cleaned.map((word) => (\n        <li key={word}>\n          <a\n            href={`https://naob.no/s%C3%B8k/${encodeURIComponent(word)}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {word}\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Found;\n","const shuffle = (original: string[]) =>\n  original\n    .map((a) => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => a.value);\n\nexport default shuffle;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport {\n  MdKeyboardBackspace as Backspace,\n  MdRefresh as Shuffle,\n  MdKeyboardReturn as Enter,\n} from 'react-icons/md';\nimport { useLetters } from '../../LettersProvider';\nimport shuffle from '../../shuffle';\nimport { useGame } from '../hooks';\nimport classes from './Buttons.module.css';\n\nconst Buttons = () => {\n  const { onGuess } = useGame();\n\n  const { all, centerLetter, outerLetters } = useLetters();\n  const [guess, setGuess] = useState('');\n  const [shuffledOuterLetters, setShuffledOuterLetters] = useState<string[]>(\n    []\n  );\n  const guessRef = useRef('');\n  guessRef.current = guess;\n\n  useEffect(() => {\n    guessRef.current = '';\n    setShuffledOuterLetters(shuffle(outerLetters));\n  }, [outerLetters, setShuffledOuterLetters, guessRef]);\n\n  const makeGuess = useCallback(() => {\n    onGuess(guessRef.current);\n    setGuess('');\n  }, [onGuess, guessRef]);\n\n  const onLetterClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      const button = event.currentTarget;\n      const letter = button.getAttribute('data-letter');\n      setGuess((g) => `${g}${letter}`);\n    },\n    [setGuess]\n  );\n\n  const onShuffle = useCallback(() => {\n    setShuffledOuterLetters(shuffle(outerLetters) as typeof outerLetters);\n  }, [setShuffledOuterLetters, outerLetters]);\n\n  const onBackspace = useCallback(() => {\n    setGuess((g) => g.substr(0, g.length - 1));\n  }, [setGuess]);\n\n  const onKeyPress = useCallback(\n    (e: KeyboardEvent) => {\n      const { key } = e;\n\n      if (key === 'Backspace') {\n        setGuess((g) => g.substring(0, g.length - 1));\n        return;\n      }\n\n      if (key === ' ') {\n        onShuffle();\n        e.preventDefault();\n        return;\n      }\n\n      if (key === 'Enter') {\n        makeGuess();\n      }\n\n      if (!all.includes(key.toLocaleLowerCase())) {\n        return;\n      }\n\n      setGuess((g) => `${g}${key}`);\n    },\n    [all, makeGuess, onShuffle]\n  );\n\n  useEffect(() => {\n    document.addEventListener('keydown', onKeyPress);\n    return () => {\n      document.removeEventListener('keydown', onKeyPress);\n    };\n  }, [onKeyPress]);\n\n  type LetterButtonProps = { letter: string } & JSX.IntrinsicElements['button'];\n\n  const LetterButton = ({ letter, className, ...rest }: LetterButtonProps) => {\n    return (\n      <button\n        data-letter={letter}\n        onClick={onLetterClick}\n        className={[classes.letterButton, className].filter(Boolean).join(' ')}\n        {...rest}\n      >\n        {letter}\n      </button>\n    );\n  };\n\n  const CenterLetterButton = (props: LetterButtonProps) => (\n    <LetterButton {...props} className={classes.centerLetter} />\n  );\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.guess}>{guess}</div>\n      <div className={classes.letterButtons}>\n        <div className={classes.topRow}>\n          <LetterButton letter={shuffledOuterLetters[0]} />\n          <LetterButton letter={shuffledOuterLetters[1]} />\n        </div>\n        <div className={classes.middleRow}>\n          <LetterButton letter={shuffledOuterLetters[2]} />\n          <CenterLetterButton letter={centerLetter} />\n          <LetterButton letter={shuffledOuterLetters[3]} />\n        </div>\n        <div className={classes.bottomRow}>\n          <LetterButton letter={shuffledOuterLetters[4]} />\n          <LetterButton letter={shuffledOuterLetters[5]} />\n        </div>\n      </div>\n      <div className={classes.controls}>\n        <button onClick={onBackspace}>\n          <Backspace />\n        </button>\n        <button onClick={onShuffle}>\n          <Shuffle />\n        </button>\n        <button onClick={makeGuess}>\n          <Enter />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Buttons;\n","import classes from './Modal.module.css';\nimport { MdClose as Close } from 'react-icons/md';\nimport { useEffect, useRef } from 'react';\n\ntype Props = {\n  title: string;\n  children: React.ReactNode;\n  onClose: () => void;\n};\n\nconst Modal = ({ children, title, onClose }: Props) => {\n  const closeRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    if (!closeRef.current) {\n      return;\n    }\n    closeRef.current.focus();\n    document.body.classList.add('no-scroll');\n    return () => {\n      document.body.classList.remove('no-scroll');\n    };\n  }, [closeRef]);\n\n  return (\n    <div className={classes.modalBackground}>\n      <div className={classes.modal}>\n        <div className={classes.header}>\n          <h2>{title}</h2>\n          <button onClick={onClose} ref={closeRef}>\n            <Close />\n          </button>\n        </div>\n        <div className={classes.contents}>{children}</div>\n        <div className={classes.footer}>\n          <button onClick={onClose}>Lukk</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import { useWords } from '../../WordProvider';\nimport { useGame, useScore } from '../hooks';\nimport classes from './Progress.module.css';\nimport { MdHelpOutline as Help } from 'react-icons/md';\nimport { useMemo, useState } from 'react';\nimport Modal from '../../Modal';\n\nconst Progress = () => {\n  const { found } = useGame();\n  const { words } = useWords();\n\n  const { score: currentPoints } = useScore(found);\n  const { score: totalPoints } = useScore(words);\n\n  const [showing, setShowing] = useState(false);\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return null;\n    }\n\n    return (\n      <Modal title=\"Poeng\" onClose={() => setShowing(false)}>\n        <p>\n          Poengene beregnes ut fra hvor mange ord som blir funnet. Hvert ord har\n          ulike poengsummer.\n        </p>\n        <ul>\n          <li>\n            ord på fire bokstaver er verdt <strong>ett poeng</strong>\n          </li>\n          <li>\n            hver bokstave etter fire er verdt <strong>ett ekstra poeng</strong>\n          </li>\n          <li>\n            ord som bruker alle bokstavenve minst en gang (et pangram) gir{' '}\n            <strong>syv ekstra poeng</strong>\n          </li>\n        </ul>\n        <h3>Eksempel</h3>\n        <p>\n          H&nbsp;I&nbsp;K&nbsp;L&nbsp;O&nbsp;S&nbsp;<strong>T</strong>\n        </p>\n        <ul>\n          <li>\n            <strong>hist</strong> er 4 poeng\n          </li>\n          <li>\n            <strong>hittil</strong> er 6 poeng\n          </li>\n          <li>\n            <strong>holistisk</strong> er (9 + 7) = 16 poeng\n          </li>\n        </ul>\n      </Modal>\n    );\n  }, [showing]);\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.bars}>\n        <progress id=\"word-progress\" max={words.length} value={found.length} />\n        <label htmlFor=\"word-progress\">\n          Ord: {found.length} / {words.length}\n        </label>\n        <progress\n          id=\"points-progress\"\n          max={totalPoints}\n          value={currentPoints}\n        />\n        <label htmlFor=\"points-progress\">\n          Poeng: {currentPoints} / {totalPoints}\n        </label>\n      </div>\n      <button onClick={() => setShowing(true)} className={classes.help}>\n        <Help />\n      </button>\n      {modal}\n    </div>\n  );\n};\n\nexport default Progress;\n","import { useMemo, useState } from 'react';\nimport { MdInfoOutline as InfoIcon } from 'react-icons/md';\nimport classes from './InfoButton.module.css';\nimport Modal from '../../Modal';\n\nconst InfoButton = () => {\n  const [showing, setShowing] = useState(false);\n\n  const modal = useMemo(() => {\n    if (!showing) {\n      return null;\n    }\n    return (\n      <Modal title=\"Staver Humle!\" onClose={() => setShowing(false)}>\n        <p>\n          Staver Humle er et ordspill hvor du lage så mange ord som du kan.\n          Hvert puslespill har syv ulike bokstaver&mdash;en fast i midten og\n          seks rundt.\n        </p>\n        <h3>Reglene</h3>\n        <p>\n          Hvert ord:\n          <ul>\n            <li>\n              <strong>må bruke</strong> den midterste bokstaven\n            </li>\n            <li>\n              være minst <strong>fire bokstaver</strong> lange\n            </li>\n            <li>\n              bruker <strong>bare</strong> de syv bokstavene\n              <br />\n              (men bokstaver kan gjentas)\n            </li>\n          </ul>\n        </p>\n        <p>\n          Hver puslespill har <strong>minst ett</strong> ord som bruker{' '}\n          <strong>alle bokstavene</strong>.\n        </p>\n        <p>\n          Det er en ny puslespill <strong>hver dag!</strong>\n        </p>\n        <p>Lykke til!</p>\n        <p>\n          <em>\n            (Want to play in English? Try the{' '}\n            <a\n              href=\"https://www.nytimes.com/puzzles/spelling-bee\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              NYT Spelling Bee\n            </a>\n            !)\n          </em>\n        </p>\n      </Modal>\n    );\n  }, [showing]);\n\n  return (\n    <>\n      <button onClick={() => setShowing(true)} className={classes.button}>\n        <InfoIcon />\n      </button>\n      {modal}\n    </>\n  );\n};\n\nexport default InfoButton;\n","import { Link } from 'react-router-dom';\nimport InfoButton from '../InfoButton';\nimport classes from './Header.module.css';\n\nconst Header = () => {\n  return (\n    <div className={classes.header}>\n      <h1>\n        <Link to=\"/\">Staver Humle 🐝</Link>\n      </h1>\n      <InfoButton />\n    </div>\n  );\n};\n\nexport default Header;\n","import { BadGuess } from '../Hive';\n\ntype Props = Pick<BadGuess, 'reason'>;\n\nconst ErrorMessage = ({ reason }: Props) => {\n  let msg = '';\n  switch (reason) {\n    case 'already-found':\n      msg = 'ordet har blitt allerede funnet';\n      break;\n    case 'invalid-letters':\n      msg = 'bruker ugyldige bokstaver';\n      break;\n    case 'missing-center':\n      msg = 'mangler obligatorisk brev';\n      break;\n    case 'too-short':\n      msg = 'for kort';\n      break;\n    case 'unknown-word':\n      msg = 'ukjent ord';\n      break;\n    default:\n      return null;\n  }\n\n  return <span>{msg}</span>;\n};\n\nexport default ErrorMessage;\n","import { useEffect, useState } from 'react';\nimport ErrorMessage from './ErrorMessage';\nimport { useGame } from '../hooks';\nimport { BadGuess } from '../Hive';\nimport classes from './ErrorDisplay.module.css';\n\nconst ErrorDisplay = () => {\n  const { badGuess } = useGame();\n  const [displayedError, setDisplayedError] = useState<BadGuess['reason']>();\n\n  useEffect(() => {\n    if (!badGuess) {\n      setDisplayedError(undefined);\n      return;\n    }\n\n    setDisplayedError(badGuess.reason);\n    const timerId = setTimeout(() => {\n      setDisplayedError(undefined);\n    }, 2500);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [badGuess]);\n\n  return (\n    <div className={classes.container}>\n      {displayedError && <ErrorMessage reason={displayedError} />}\n    </div>\n  );\n};\n\nexport default ErrorDisplay;\n","import { useLetters } from '../../LettersProvider';\nimport { useWords } from '../../WordProvider';\nimport classes from './Grid.module.css';\n\nconst EMPTY = <span className={classes.filler}>&ndash;</span>;\n\nconst Grid = () => {\n  const { words } = useWords();\n  const { all } = useLetters();\n\n  const [shortest, longest] = words.reduce(\n    ([min, max], word) => {\n      return [Math.min(min, word.length), Math.max(max, word.length)];\n    },\n    [1000, 3]\n  );\n\n  const columns = [\n    <th key=\"blank\">&nbsp;</th>, //\n  ];\n  const totals = [];\n  for (let i = shortest; i <= longest; i += 1) {\n    columns.push(<th key={i}>{i}</th>);\n\n    const count = words.filter((word) => word.length === i).length;\n    totals.push(<td key={`total @ ${i}`}>{count || EMPTY}</td>);\n  }\n  columns.push(<th key=\"column-sum\">Σ</th>);\n\n  const body = [];\n  for (let i = 0; i < all.length; i += 1) {\n    const letter = all[i];\n    const matchingWords = words.filter((word) => word[0] === letter);\n\n    const cells = [\n      <td key={letter} className={[classes.border, classes.letter].join(' ')}>\n        {letter}\n      </td>,\n    ];\n    for (let i = shortest; i <= longest; i += 1) {\n      const matchingLength = matchingWords.filter((word) => word.length === i)\n        .length;\n      cells.push(<td key={`${letter} @ ${i}`}>{matchingLength || EMPTY}</td>);\n    }\n    cells.push(\n      <td key={`${letter} @ total`} className={classes.border}>\n        {matchingWords.length || EMPTY}\n      </td>\n    );\n\n    body.push(<tr key={`row-${letter}`}>{cells}</tr>);\n  }\n\n  body.push(\n    <tr key=\"row-totals\" className={classes.border}>\n      <td>Σ</td>\n      {totals}\n      <td>{words.length}</td>\n    </tr>\n  );\n\n  return (\n    <table className={classes.grid}>\n      <thead>\n        <tr className={classes.border}>{columns}</tr>\n      </thead>\n      <tbody>{body}</tbody>\n    </table>\n  );\n};\n\nexport default Grid;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useGameId } from '../hooks';\n\nconst getSavedWords = (key: string) => {\n  try {\n    const item = localStorage.getItem(key);\n    if (item) {\n      const saved = JSON.parse(item);\n      if (Array.isArray(saved)) {\n        return saved.filter((word) => typeof word === 'string');\n      }\n    }\n  } catch (ex) {\n    // Do nothing\n  }\n  return [];\n};\n\nexport const useFoundWords = () => {\n  const { gameId } = useGameId();\n  const key = `saved/${gameId}`;\n\n  const [found, setStateFound] = useState<string[]>([]);\n\n  const addFoundWord = useCallback(\n    (newWord) => {\n      setStateFound((existing) => {\n        const newWords = [...existing, newWord].sort();\n        localStorage.setItem(key, JSON.stringify(newWords));\n        return newWords;\n      });\n    },\n    [setStateFound, key]\n  );\n\n  useEffect(() => {\n    setStateFound(getSavedWords(key));\n  }, [key, setStateFound]);\n\n  return {\n    found,\n    addFoundWord,\n  };\n};\n","import { createContext, useCallback, useState } from 'react';\nimport { useLetters } from '../LettersProvider';\nimport { useWords } from '../WordProvider';\nimport Found from './Found';\nimport Buttons from './Buttons';\nimport Progress from './Progress';\nimport Header from './Header';\nimport ErrorDisplay from './ErrorDisplay';\nimport Grid from './Grid';\nimport classes from './Hive.module.css';\nimport { useFoundWords } from './useFoundWords';\n\nexport type BadGuess = {\n  reason:\n    | 'too-short'\n    | 'missing-center'\n    | 'already-found'\n    | 'unknown-word'\n    | 'invalid-letters';\n  etag: string | number;\n};\n\ntype ContextType = {\n  found: string[];\n  onGuess: (guess: string) => void;\n  badGuess: BadGuess | undefined;\n};\n\nexport const Context = createContext<ContextType>({\n  found: [],\n  onGuess: () => undefined,\n  badGuess: undefined,\n});\n\nconst Hive = () => {\n  const [badGuess, setBadGuess] = useState<BadGuess>();\n  const { all, centerLetter } = useLetters();\n  const { words } = useWords();\n\n  const { found, addFoundWord } = useFoundWords();\n\n  const recordBadGuess = useCallback(\n    (reason: BadGuess['reason'] | undefined) => {\n      if (!reason) {\n        setBadGuess(undefined);\n        return;\n      }\n\n      setBadGuess({ reason, etag: Date.now() });\n    },\n    [setBadGuess]\n  );\n\n  const makeGuess = useCallback(\n    (input: string) => {\n      if (!input) {\n        // No error message for this.\n        return;\n      }\n\n      const word = input\n        .toLocaleLowerCase()\n        .split('')\n        .filter((letter) => all.includes(letter))\n        .join('');\n\n      if (word.length !== input.length) {\n        recordBadGuess('invalid-letters');\n        return;\n      }\n\n      if (word.length < 4) {\n        recordBadGuess('too-short');\n        return;\n      }\n\n      if (!word.includes(centerLetter)) {\n        recordBadGuess('missing-center');\n        return;\n      }\n\n      if (found.includes(word)) {\n        recordBadGuess('already-found');\n        return;\n      }\n\n      if (!words.includes(word)) {\n        recordBadGuess('unknown-word');\n        return;\n      }\n\n      addFoundWord(word);\n      recordBadGuess(undefined);\n    },\n    [all, centerLetter, found, words, addFoundWord, recordBadGuess]\n  );\n\n  return (\n    <Context.Provider value={{ found, onGuess: makeGuess, badGuess }}>\n      <div className={classes.container}>\n        <Header />\n        <div className={classes.gameContainer}>\n          <div className={classes.buttonsContainer}>\n            <ErrorDisplay />\n            <Buttons />\n          </div>\n          <div className={classes.column}>\n            <Progress />\n            <Found />\n            <Grid />\n          </div>\n        </div>\n      </div>\n    </Context.Provider>\n  );\n};\n\nexport default Hive;\n","import WordsProvider from '../../WordProvider';\nimport LettersProvider from '../../LettersProvider';\nimport Hive from '../../Hive';\n\nconst Play = () => {\n  return (\n    <LettersProvider>\n      <WordsProvider>\n        <Hive />\n      </WordsProvider>\n    </LettersProvider>\n  );\n};\n\nexport default Play;\n","import './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Start from './pages/Start';\nimport Play from './pages/Play';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Start />\n        </Route>\n\n        <Route path=\"/:gameId\">\n          <Play />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Buttons_container__1Zt8k\",\"guess\":\"Buttons_guess__2Anft\",\"letterButton\":\"Buttons_letterButton__1mMw1\",\"centerLetter\":\"Buttons_centerLetter__35133\",\"letterButtons\":\"Buttons_letterButtons__3XtpL\",\"controls\":\"Buttons_controls__vjaFF\"};"],"sourceRoot":""}